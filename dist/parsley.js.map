{"version":3,"sources":["parsley.js","src/parsley/utils.js","src/parsley/defaults.js","src/parsley/abstract.js","src/parsley/validator.js","src/parsley/validator_registry.js","src/parsley/ui.js","src/parsley/form.js","src/parsley/factory/constraint.js","src/parsley/field.js","src/parsley/multiple.js","src/parsley/factory.js","src/parsley/main.js","src/parsley/pubsub.js","src/parsley/remote.js","src/i18n/en.js","src/vendor/inputevent.js","src/parsley.js"],"names":["global","factory","exports","module","require","define","amd","parsley","$","globalID","pastWarnings","ParsleyUtils__ParsleyUtils","attr","$element","namespace","obj","i","attribute","attributes","regex","RegExp","hasOwnProperty","length","specified","test","name","camelize","slice","deserializeValue","value","checkAttr","is","setAttr","setAttribute","dasherize","String","generateID","num","isNaN","Number","parseJSON","e","str","replace","match","chr","toUpperCase","toLowerCase","warn","window","console","arguments","warnOnce","msg","_resetWarnings","trimString","string","namespaceEvents","events","split","map","evt","join","difference","array","remove","result","each","_","elem","indexOf","push","all","promises","when","objectCreate","Object","create","prototype","Error","TypeError","_SubmitSelector","ParsleyUtils__default","ParsleyDefaults","inputs","excluded","priorityEnabled","multiple","group","uiEnabled","validationThreshold","focus","trigger","triggerAfterFailure","errorClass","successClass","classHandler","ParsleyField","errorsContainer","errorsWrapper","errorTemplate","ParsleyAbstract","__id__","asyncSupport","_pipeAccordingToValidationResult","pipe","r","Deferred","validationResult","reject","resolve","promise","actualizeOptions","options","domOptions","parent","_resetOptions","initOptions","_listeners","on","fn","queue","subscribe","listenTo","off","splice","unsubscribe","unsubscribeTo","target","extraArg","parentResult","call","reset","__class__","_resetUI","_trigger","fields","destroy","_destroyUI","removeData","asyncIsValid","force","whenValid","_findRelated","find","requirementConverters","integer","parseInt","number","parseFloat","reference","boolean","object","regexp","flags","convertArrayRequirement","m","values","convertRequirement","requirementType","converter","convertExtraOptionRequirement","requirementSpec","extraOptionReader","main","extra","key","ParsleyValidator","spec","extend","validate","requirementFirstArg","isArray","validateMultiple","validateNumber","validateString","parseRequirements","requirements","type","isPlainObject","priority","ParsleyValidatorRegistry","validators","catalog","locale","init","typeRegexes","email","digits","alphanum","url","range","decimalPlaces","Math","max","addValidator","Parsley","setLocale","addCatalog","messages","set","addMessage","message","addMessages","nameMessageObject","arg1","arg2","_setValidator","updateValidator","removeValidator","validator","getErrorMessage","constraint","typeMessages","formatMessage","defaultMessage","en","parameters","notblank","required","step","base","nb","decimals","toInt","round","f","pow","pattern","minlength","requirement","maxlength","min","mincheck","maxcheck","check","equalto","refOrValue","$reference","val","ParsleyUI","diffResults","newResult","oldResult","deep","added","kept","found","j","assert","removed","Form","_actualizeTriggers","onSubmitValidate","onSubmitButton","_focusedField","field","noFocus","Field","_reflowUI","_buildUI","_ui","diff","lastValidationResult","_manageStatusClass","_manageErrorsMessages","_failedOnce","getErrorsMessages","errorMessage","_getErrorMessage","addError","updateClass","_addError","_errorClass","updateError","_updateError","removeError","_removeError","hasConstraints","needsValidation","_successClass","_resetClass","errorsMessagesDisabled","_insertErrorWrapper","$errorsWrapper","append","addClass","html","removeClass","customConstraintErrorMessage","$errorClassHandler","_manageClassHandler","errorsWrapperId","validationInformationVisible","$handler","_inputHolder","$errorsContainer","after","$toBind","_validateIfNeeded","event","getValue","debounce","clearTimeout","_debounced","setTimeout","children","ParsleyForm","element","ParsleyForm__statusMapping","pending","resolved","rejected","$submitSource","_$submitSource","first","prop","whenValidate","state","stopImmediatePropagation","preventDefault","done","_submit","currentTarget","$synthetic","appendTo","Event","submitEvent","_refreshFields","_withoutReactualizingFormOptions","fail","always","isValid","_bindFields","oldFields","fieldsMappedById","not","fieldInstance","Factory","oldActualizeOptions","eventName","ConstraintFactory","parsleyField","isDomConstraint","validatorSpec","_validatorRegistry","_parseRequirements","capitalize","cap","instance","requirementList","parsleyFormInstance","constraints","constraintsByName","_bindConstraints","parsley_field__statusMapping","refreshConstraints","_isInGroup","_refreshed","_isRequired","validateIfEmpty","inArray","groupedConstraints","_getGroupedConstraints","_validateConstraint","Array","_handleWhitespace","addConstraint","removeConstraint","updateConstraint","undefined","_bindHtml5Constraints","trimValue","whitespace","index","p","sort","a","b","parsley_field","ParsleyMultiple","addElement","$elements","fieldConstraints","has","data","filter","_init","ParsleyFactory","savedparsleyFormInstance","__version__","bind","isMultiple","handleMultiple","parsleyMultipleInstance","input","$previouslyRelated","get","doNotStore","parsleyInstance","ParsleyExtend","vernums","jquery","forEach","document","version","psly","instances","ParsleyConfig","ParsleyUtils","registry","i18n","method","proxy","UI","doNotUpdateClass","autoBind","o","deprecated","adapt","context","parsleyAdaptedCallback","args","unshift","apply","eventPrefix","lastIndexOf","substr","listen","callback","unsubscribeAll","emit","instanceGiven","pubsub","asyncValidators","xhr","status","reverse","addAsyncValidator","ajaxOptions","csr","encodeURIComponent","remoteOptions","param","_remoteCache","ajax","handleXhr","then","InputEvent","globals","isNativeEvent","originalEvent","isTrusted","fakeInputEvent","misbehaves","behavesOk","selector","install","inputEventPatched","uninstall","inputevent"],"mappings":"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","file":"parsley.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :\n  typeof define === 'function' && define.amd ? define(['jquery'], factory) :\n  global.parsley = factory(global.$)\n}(this, function ($) { 'use strict';\n\n  var globalID = 1;\n  var pastWarnings = {};\n\n  var ParsleyUtils__ParsleyUtils = {\n    // Parsley DOM-API\n    // returns object from dom attributes and values\n    attr: function ($element, namespace, obj) {\n      var i;\n      var attribute;\n      var attributes;\n      var regex = new RegExp('^' + namespace, 'i');\n\n      if ('undefined' === typeof obj)\n        obj = {};\n      else {\n        // Clear all own properties. This won't affect prototype's values\n        for (i in obj) {\n          if (obj.hasOwnProperty(i))\n            delete obj[i];\n        }\n      }\n\n      if ('undefined' === typeof $element || 'undefined' === typeof $element[0])\n        return obj;\n\n      attributes = $element[0].attributes;\n      for (i = attributes.length; i--; ) {\n        attribute = attributes[i];\n\n        if (attribute && attribute.specified && regex.test(attribute.name)) {\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n        }\n      }\n\n      return obj;\n    },\n\n    checkAttr: function ($element, namespace, checkAttr) {\n      return $element.is('[' + namespace + checkAttr + ']');\n    },\n\n    setAttr: function ($element, namespace, attr, value) {\n      $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\n    },\n\n    generateID: function () {\n      return '' + globalID++;\n    },\n\n    /** Third party functions **/\n    // Zepto deserialize function\n    deserializeValue: function (value) {\n      var num;\n\n      try {\n        return value ?\n          value == \"true\" ||\n          (value == \"false\" ? false :\n          value == \"null\" ? null :\n          !isNaN(num = Number(value)) ? num :\n          /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\n          value)\n          : value;\n      } catch (e) { return value; }\n    },\n\n    // Zepto camelize function\n    camelize: function (str) {\n      return str.replace(/-+(.)?/g, function (match, chr) {\n        return chr ? chr.toUpperCase() : '';\n      });\n    },\n\n    // Zepto dasherize function\n    dasherize: function (str) {\n      return str.replace(/::/g, '/')\n        .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n        .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n        .replace(/_/g, '-')\n        .toLowerCase();\n    },\n\n    warn: function () {\n      if (window.console && 'function' === typeof window.console.warn)\n        window.console.warn(...arguments);\n    },\n\n    warnOnce: function(msg) {\n      if (!pastWarnings[msg]) {\n        pastWarnings[msg] = true;\n        this.warn(...arguments);\n      }\n    },\n\n    _resetWarnings: function () {\n      pastWarnings = {};\n    },\n\n    trimString: function(string) {\n      return string.replace(/^\\s+|\\s+$/g, '');\n    },\n\n    namespaceEvents: function(events, namespace) {\n      events = this.trimString(events || '').split(/\\s+/);\n      if (!events[0])\n        return '';\n      return $.map(events, evt => `${evt}.${namespace}`).join(' ');\n    },\n\n    difference: function(array, remove) {\n      // This is O(N^2), should be optimized\n      let result = [];\n      $.each(array, (_, elem) => {\n        if (remove.indexOf(elem) == -1)\n          result.push(elem);\n      });\n      return result;\n    },\n\n    // Alter-ego to native Promise.all, but for jQuery\n    all: function(promises) {\n      // jQuery treats $.when() and $.when(singlePromise) differently; let's avoid that and add spurious elements\n      return $.when(...promises, 42, 42);\n    },\n\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n    objectCreate: Object.create || (function () {\n      var Object = function () {};\n      return function (prototype) {\n        if (arguments.length > 1) {\n          throw Error('Second argument not supported');\n        }\n        if (typeof prototype != 'object') {\n          throw TypeError('Argument must be an object');\n        }\n        Object.prototype = prototype;\n        var result = new Object();\n        Object.prototype = null;\n        return result;\n      };\n    })(),\n\n    _SubmitSelector: 'input[type=\"submit\"], button:submit'\n  };\n\n  var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;\n\n  // All these options could be overriden and specified directly in DOM using\n  // `data-parsley-` default DOM-API\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\n  var ParsleyDefaults = {\n    // ### General\n\n    // Default data-namespace for DOM API\n    namespace: 'data-parsley-',\n\n    // Supported inputs by default\n    inputs: 'input, textarea, select',\n\n    // Excluded inputs by default\n    excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n    // Stop validating field on highest priority failing constraint\n    priorityEnabled: true,\n\n    // ### Field only\n\n    // identifier used to group together inputs (e.g. radio buttons...)\n    multiple: null,\n\n    // identifier (or array of identifiers) used to validate only a select group of inputs\n    group: null,\n\n    // ### UI\n    // Enable\\Disable error messages\n    uiEnabled: true,\n\n    // Key events threshold before validation\n    validationThreshold: 3,\n\n    // Focused field on form validation error. 'first'|'last'|'none'\n    focus: 'first',\n\n    // event(s) that will trigger validation before first failure. eg: `input`...\n    trigger: false,\n\n    // event(s) that will trigger validation after first failure.\n    triggerAfterFailure: 'input',\n\n    // Class that would be added on every failing validation Parsley field\n    errorClass: 'parsley-error',\n\n    // Same for success validation\n    successClass: 'parsley-success',\n\n    // Return the `$element` that will receive these above success or error classes\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    classHandler: function (ParsleyField) {},\n\n    // Return the `$element` where errors will be appended\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    errorsContainer: function (ParsleyField) {},\n\n    // ul elem that would receive errors' list\n    errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n\n    // li elem that would receive error message\n    errorTemplate: '<li></li>'\n  };\n\n  var ParsleyAbstract = function () {\n    this.__id__ = ParsleyUtils__default.generateID();\n  };\n\n  ParsleyAbstract.prototype = {\n    asyncSupport: true, // Deprecated\n\n    _pipeAccordingToValidationResult: function () {\n      var pipe = () => {\n        var r = $.Deferred();\n        if (true !== this.validationResult)\n          r.reject();\n        return r.resolve().promise();\n      };\n      return [pipe, pipe];\n    },\n\n    actualizeOptions: function () {\n      ParsleyUtils__default.attr(this.$element, this.options.namespace, this.domOptions);\n      if (this.parent && this.parent.actualizeOptions)\n        this.parent.actualizeOptions();\n      return this;\n    },\n\n    _resetOptions: function (initOptions) {\n      this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);\n      this.options = ParsleyUtils__default.objectCreate(this.domOptions);\n      // Shallow copy of ownProperties of initOptions:\n      for (var i in initOptions) {\n        if (initOptions.hasOwnProperty(i))\n          this.options[i] = initOptions[i];\n      }\n      this.actualizeOptions();\n    },\n\n    _listeners: null,\n\n    // Register a callback for the given event name\n    // Callback is called with context as the first argument and the `this`\n    // The context is the current parsley instance, or window.Parsley if global\n    // A return value of `false` will interrupt the calls\n    on: function (name, fn) {\n      this._listeners = this._listeners || {};\n      var queue = this._listeners[name] = this._listeners[name] || [];\n      queue.push(fn);\n\n      return this;\n    },\n\n    // Deprecated. Use `on` instead\n    subscribe: function(name, fn) {\n      $.listenTo(this, name.toLowerCase(), fn);\n    },\n\n    // Unregister a callback (or all if none is given) for the given event name\n    off: function (name, fn) {\n      var queue = this._listeners && this._listeners[name];\n      if (queue) {\n        if (!fn) {\n          delete this._listeners[name];\n        } else {\n          for (var i = queue.length; i--; )\n            if (queue[i] === fn)\n              queue.splice(i, 1);\n        }\n      }\n      return this;\n    },\n\n    // Deprecated. Use `off`\n    unsubscribe: function(name, fn) {\n      $.unsubscribeTo(this, name.toLowerCase());\n    },\n\n    // Trigger an event of the given name\n    // A return value of `false` interrupts the callback chain\n    // Returns false if execution was interrupted\n    trigger: function (name, target, extraArg) {\n      target = target || this;\n      var queue = this._listeners && this._listeners[name];\n      var result;\n      var parentResult;\n      if (queue) {\n        for (var i = queue.length; i--; ) {\n          result = queue[i].call(target, target, extraArg);\n          if (result === false) return result;\n        }\n      }\n      if (this.parent) {\n        return this.parent.trigger(name, target, extraArg);\n      }\n      return true;\n    },\n\n    // Reset UI\n    reset: function () {\n      // Field case: just emit a reset event for UI\n      if ('ParsleyForm' !== this.__class__) {\n        this._resetUI();\n        return this._trigger('reset');\n      }\n\n      // Form case: emit a reset event for each field\n      for (var i = 0; i < this.fields.length; i++)\n        this.fields[i].reset();\n\n      this._trigger('reset');\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function () {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      this._destroyUI();\n      if ('ParsleyForm' !== this.__class__) {\n        this.$element.removeData('Parsley');\n        this.$element.removeData('ParsleyFieldMultiple');\n        this._trigger('destroy');\n\n        return;\n      }\n\n      // Form case: destroy all its fields and then destroy stored instance\n      for (var i = 0; i < this.fields.length; i++)\n        this.fields[i].destroy();\n\n      this.$element.removeData('Parsley');\n      this._trigger('destroy');\n    },\n\n    asyncIsValid: function (group, force) {\n      ParsleyUtils__default.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\n      return this.whenValid({group, force});\n    },\n\n    _findRelated: function () {\n      return this.options.multiple ?\n        this.parent.$element.find(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`)\n      : this.$element;\n    }\n  };\n\n  var requirementConverters = {\n    string: function(string) {\n      return string;\n    },\n    integer: function(string) {\n      if (isNaN(string))\n        throw 'Requirement is not an integer: \"' + string + '\"';\n      return parseInt(string, 10);\n    },\n    number: function(string) {\n      if (isNaN(string))\n        throw 'Requirement is not a number: \"' + string + '\"';\n      return parseFloat(string);\n    },\n    reference: function(string) { // Unused for now\n      var result = $(string);\n      if (result.length === 0)\n        throw 'No such reference: \"' + string + '\"';\n      return result;\n    },\n    boolean: function(string) {\n      return string !== 'false';\n    },\n    object: function(string) {\n      return ParsleyUtils__default.deserializeValue(string);\n    },\n    regexp: function(regexp) {\n      var flags = '';\n\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\n        // Replace the regexp literal string with the first match group: ([gimy]*)\n        // If no flag is present, this will be a blank string\n        flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\n        // Again, replace the regexp literal string with the first match group:\n        // everything excluding the opening and closing slashes and the flags\n        regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n      } else {\n        // Anchor regexp:\n        regexp = '^' + regexp + '$';\n      }\n      return new RegExp(regexp, flags);\n    }\n  };\n\n  var convertArrayRequirement = function(string, length) {\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n    if (!m)\n      throw 'Requirement is not an array: \"' + string + '\"';\n    var values = m[1].split(',').map(ParsleyUtils__default.trimString);\n    if (values.length !== length)\n      throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n    return values;\n  };\n\n  var convertRequirement = function(requirementType, string) {\n    var converter = requirementConverters[requirementType || 'string'];\n    if (!converter)\n      throw 'Unknown requirement specification: \"' + requirementType + '\"';\n    return converter(string);\n  };\n\n  var convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\n    var main = null;\n    var extra = {};\n    for (var key in requirementSpec) {\n      if (key) {\n        var value = extraOptionReader(key);\n        if ('string' === typeof value)\n          value = convertRequirement(requirementSpec[key], value);\n        extra[key] = value;\n      } else {\n        main = convertRequirement(requirementSpec[key], string);\n      }\n    }\n    return [main, extra];\n  };\n\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\n\n  var ParsleyValidator = function(spec) {\n    $.extend(true, this, spec);\n  };\n\n  ParsleyValidator.prototype = {\n    // Returns `true` iff the given `value` is valid according the given requirements.\n    validate: function(value, requirementFirstArg) {\n      if (this.fn) { // Legacy style validator\n\n        if (arguments.length > 3)  // If more args then value, requirement, instance...\n          requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\n        return this.fn(value, requirementFirstArg);\n      }\n\n      if ($.isArray(value)) {\n        if (!this.validateMultiple)\n          throw 'Validator `' + this.name + '` does not handle multiple values';\n        return this.validateMultiple(...arguments);\n      } else {\n        if (this.validateNumber) {\n          if (isNaN(value))\n            return false;\n          arguments[0] = parseFloat(arguments[0]);\n          return this.validateNumber(...arguments);\n        }\n        if (this.validateString) {\n          return this.validateString(...arguments);\n        }\n        throw 'Validator `' + this.name + '` only handles multiple values';\n      }\n    },\n\n    // Parses `requirements` into an array of arguments,\n    // according to `this.requirementType`\n    parseRequirements: function(requirements, extraOptionReader) {\n      if ('string' !== typeof requirements) {\n        // Assume requirement already parsed\n        // but make sure we return an array\n        return $.isArray(requirements) ? requirements : [requirements];\n      }\n      var type = this.requirementType;\n      if ($.isArray(type)) {\n        var values = convertArrayRequirement(requirements, type.length);\n        for (var i = 0; i < values.length; i++)\n          values[i] = convertRequirement(type[i], values[i]);\n        return values;\n      } else if ($.isPlainObject(type)) {\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n      } else {\n        return [convertRequirement(type, requirements)];\n      }\n    },\n    // Defaults:\n    requirementType: 'string',\n\n    priority: 2\n\n  };\n\n  var ParsleyValidatorRegistry = function (validators, catalog) {\n    this.__class__ = 'ParsleyValidatorRegistry';\n\n    // Default Parsley locale is en\n    this.locale = 'en';\n\n    this.init(validators || {}, catalog || {});\n  };\n\n  var typeRegexes =  {\n    email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n    integer: /^-?\\d+$/,\n\n    digits: /^\\d+$/,\n\n    alphanum: /^\\w+$/i,\n\n    url: new RegExp(\n        \"^\" +\n          // protocol identifier\n          \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n          // user:pass authentication\n          \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n          \"(?:\" +\n            // IP address exclusion\n            // private & local networks\n            // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n            // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n            // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n            // IP address dotted notation octets\n            // excludes loopback network 0.0.0.0\n            // excludes reserved space >= 224.0.0.0\n            // excludes network & broacast addresses\n            // (first & last IP address of each class)\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n          \"|\" +\n            // host name\n            \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n            // domain name\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n            // TLD identifier\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\n          \")\" +\n          // port number\n          \"(?::\\\\d{2,5})?\" +\n          // resource path\n          \"(?:/\\\\S*)?\" +\n        \"$\", 'i'\n      )\n  };\n  typeRegexes.range = typeRegexes.number;\n\n  // See http://stackoverflow.com/a/10454560/8279\n  var decimalPlaces = num => {\n    var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) { return 0; }\n    return Math.max(\n         0,\n         // Number of digits right of decimal point.\n         (match[1] ? match[1].length : 0) -\n         // Adjust for scientific notation.\n         (match[2] ? +match[2] : 0));\n  };\n\n  ParsleyValidatorRegistry.prototype = {\n    init: function (validators, catalog) {\n      this.catalog = catalog;\n      // Copy prototype's validators:\n      this.validators = $.extend({}, this.validators);\n\n      for (var name in validators)\n        this.addValidator(name, validators[name].fn, validators[name].priority);\n\n      window.Parsley.trigger('parsley:validator:init');\n    },\n\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n    setLocale: function (locale) {\n      if ('undefined' === typeof this.catalog[locale])\n        throw new Error(locale + ' is not available in the catalog');\n\n      this.locale = locale;\n\n      return this;\n    },\n\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n    addCatalog: function (locale, messages, set) {\n      if ('object' === typeof messages)\n        this.catalog[locale] = messages;\n\n      if (true === set)\n        return this.setLocale(locale);\n\n      return this;\n    },\n\n    // Add a specific message for a given constraint in a given locale\n    addMessage: function (locale, name, message) {\n      if ('undefined' === typeof this.catalog[locale])\n        this.catalog[locale] = {};\n\n      this.catalog[locale][name] = message;\n\n      return this;\n    },\n\n    // Add messages for a given locale\n    addMessages: function (locale, nameMessageObject) {\n      for (var name in nameMessageObject)\n        this.addMessage(locale, name, nameMessageObject[name]);\n\n      return this;\n    },\n\n    // Add a new validator\n    //\n    //    addValidator('custom', {\n    //        requirementType: ['integer', 'integer'],\n    //        validateString: function(value, from, to) {},\n    //        priority: 22,\n    //        messages: {\n    //          en: \"Hey, that's no good\",\n    //          fr: \"Aye aye, pas bon du tout\",\n    //        }\n    //    })\n    //\n    // Old API was addValidator(name, function, priority)\n    //\n    addValidator: function (name, arg1, arg2) {\n      if (this.validators[name])\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is already defined.');\n      else if (ParsleyDefaults.hasOwnProperty(name)) {\n        ParsleyUtils__default.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n        return;\n      }\n      return this._setValidator(...arguments);\n    },\n\n    updateValidator: function (name, arg1, arg2) {\n      if (!this.validators[name]) {\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not already defined.');\n        return this.addValidator(...arguments);\n      }\n      return this._setValidator(...arguments);\n    },\n\n    removeValidator: function (name) {\n      if (!this.validators[name])\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not defined.');\n\n      delete this.validators[name];\n\n      return this;\n    },\n\n    _setValidator: function (name, validator, priority) {\n      if ('object' !== typeof validator) {\n        // Old style validator, with `fn` and `priority`\n        validator = {\n          fn: validator,\n          priority: priority\n        };\n      }\n      if (!validator.validate) {\n        validator = new ParsleyValidator(validator);\n      }\n      this.validators[name] = validator;\n\n      for (var locale in validator.messages || {})\n        this.addMessage(locale, name, validator.messages[locale]);\n\n      return this;\n    },\n\n    getErrorMessage: function (constraint) {\n      var message;\n\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\n      if ('type' === constraint.name) {\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\n        message = typeMessages[constraint.requirements];\n      } else\n        message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n    },\n\n    // Kind of light `sprintf()` implementation\n    formatMessage: function (string, parameters) {\n      if ('object' === typeof parameters) {\n        for (var i in parameters)\n          string = this.formatMessage(string, parameters[i]);\n\n        return string;\n      }\n\n      return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n    },\n\n    // Here is the Parsley default validators list.\n    // A validator is an object with the following key values:\n    //  - priority: an integer\n    //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n    // Alternatively, a validator can be a function that returns such an object\n    //\n    validators: {\n      notblank: {\n        validateString: function(value) {\n          return /\\S/.test(value);\n        },\n        priority: 2\n      },\n      required: {\n        validateMultiple: function(values) {\n          return values.length > 0;\n        },\n        validateString: function(value) {\n          return /\\S/.test(value);\n        },\n        priority: 512\n      },\n      type: {\n        validateString: function(value, type, {step = 'any', base = 0} = {}) {\n          var regex = typeRegexes[type];\n          if (!regex) {\n            throw new Error('validator type `' + type + '` is not supported');\n          }\n          if (!regex.test(value))\n            return false;\n          if ('number' === type) {\n            if (!/^any$/i.test(step || '')) {\n              var nb = Number(value);\n              var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\n              if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\n                return false;\n              // Be careful of rounding errors by using integers.\n              var toInt = f => Math.round(f * Math.pow(10, decimals));\n              if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\n                return false;\n            }\n          }\n          return true;\n        },\n        requirementType: {\n          '': 'string',\n          step: 'string',\n          base: 'number'\n        },\n        priority: 256\n      },\n      pattern: {\n        validateString: function(value, regexp) {\n          return regexp.test(value);\n        },\n        requirementType: 'regexp',\n        priority: 64\n      },\n      minlength: {\n        validateString: function (value, requirement) {\n          return value.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxlength: {\n        validateString: function (value, requirement) {\n          return value.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      length: {\n        validateString: function (value, min, max) {\n          return value.length >= min && value.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      mincheck: {\n        validateMultiple: function (values, requirement) {\n          return values.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxcheck: {\n        validateMultiple: function (values, requirement) {\n          return values.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      check: {\n        validateMultiple: function (values, min, max) {\n          return values.length >= min && values.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      min: {\n        validateNumber: function (value, requirement) {\n          return value >= requirement;\n        },\n        requirementType: 'number',\n        priority: 30\n      },\n      max: {\n        validateNumber: function (value, requirement) {\n          return value <= requirement;\n        },\n        requirementType: 'number',\n        priority: 30\n      },\n      range: {\n        validateNumber: function (value, min, max) {\n          return value >= min && value <= max;\n        },\n        requirementType: ['number', 'number'],\n        priority: 30\n      },\n      equalto: {\n        validateString: function (value, refOrValue) {\n          var $reference = $(refOrValue);\n          if ($reference.length)\n            return value === $reference.val();\n          else\n            return value === refOrValue;\n        },\n        priority: 256\n      }\n    }\n  };\n\n  var ParsleyUI = {};\n\n  var diffResults = function (newResult, oldResult, deep) {\n    var added = [];\n    var kept = [];\n\n    for (var i = 0; i < newResult.length; i++) {\n      var found = false;\n\n      for (var j = 0; j < oldResult.length; j++)\n        if (newResult[i].assert.name === oldResult[j].assert.name) {\n          found = true;\n          break;\n        }\n\n      if (found)\n        kept.push(newResult[i]);\n      else\n        added.push(newResult[i]);\n    }\n\n    return {\n      kept: kept,\n      added: added,\n      removed: !deep ? diffResults(oldResult, newResult, true).added : []\n    };\n  };\n\n  ParsleyUI.Form = {\n\n    _actualizeTriggers: function () {\n      this.$element.on('submit.Parsley', evt => { this.onSubmitValidate(evt); });\n      this.$element.on('click.Parsley', ParsleyUtils__default._SubmitSelector, evt => { this.onSubmitButton(evt); });\n\n      // UI could be disabled\n      if (false === this.options.uiEnabled)\n        return;\n\n      this.$element.attr('novalidate', '');\n    },\n\n    focus: function () {\n      this._focusedField = null;\n\n      if (true === this.validationResult || 'none' === this.options.focus)\n        return null;\n\n      for (var i = 0; i < this.fields.length; i++) {\n        var field = this.fields[i];\n        if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n          this._focusedField = field.$element;\n          if ('first' === this.options.focus)\n            break;\n        }\n      }\n\n      if (null === this._focusedField)\n        return null;\n\n      return this._focusedField.focus();\n    },\n\n    _destroyUI: function () {\n      // Reset all event listeners\n      this.$element.off('.Parsley');\n    }\n\n  };\n\n  ParsleyUI.Field = {\n\n    _reflowUI: function () {\n      this._buildUI();\n\n      // If this field doesn't have an active UI don't bother doing something\n      if (!this._ui)\n        return;\n\n      // Diff between two validation results\n      var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n      // Then store current validation result for next reflow\n      this._ui.lastValidationResult = this.validationResult;\n\n      // Handle valid / invalid / none field class\n      this._manageStatusClass();\n\n      // Add, remove, updated errors messages\n      this._manageErrorsMessages(diff);\n\n      // Triggers impl\n      this._actualizeTriggers();\n\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n      if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\n        this._failedOnce = true;\n        this._actualizeTriggers();\n      }\n    },\n\n    // Returns an array of field's error message(s)\n    getErrorsMessages: function () {\n      // No error message, field is valid\n      if (true === this.validationResult)\n        return [];\n\n      var messages = [];\n\n      for (var i = 0; i < this.validationResult.length; i++)\n        messages.push(this.validationResult[i].errorMessage ||\n         this._getErrorMessage(this.validationResult[i].assert));\n\n      return messages;\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    addError: function (name, {message, assert, updateClass = true} = {}) {\n      this._buildUI();\n      this._addError(name, {message, assert});\n\n      if (updateClass)\n        this._errorClass();\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    updateError: function (name, {message, assert, updateClass = true} = {}) {\n      this._buildUI();\n      this._updateError(name, {message, assert});\n\n      if (updateClass)\n        this._errorClass();\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    removeError: function (name, {updateClass = true} = {}) {\n      this._buildUI();\n      this._removeError(name);\n\n      // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n      // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n      if (updateClass)\n        this._manageStatusClass();\n    },\n\n    _manageStatusClass: function () {\n      if (this.hasConstraints() && this.needsValidation() && true === this.validationResult)\n        this._successClass();\n      else if (this.validationResult.length > 0)\n        this._errorClass();\n      else\n        this._resetClass();\n    },\n\n    _manageErrorsMessages: function (diff) {\n      if ('undefined' !== typeof this.options.errorsMessagesDisabled)\n        return;\n\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n      if ('undefined' !== typeof this.options.errorMessage) {\n        if ((diff.added.length || diff.kept.length)) {\n          this._insertErrorWrapper();\n\n          if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n            this._ui.$errorsWrapper\n              .append(\n                $(this.options.errorTemplate)\n                .addClass('parsley-custom-error-message')\n              );\n\n          return this._ui.$errorsWrapper\n            .addClass('filled')\n            .find('.parsley-custom-error-message')\n            .html(this.options.errorMessage);\n        }\n\n        return this._ui.$errorsWrapper\n          .removeClass('filled')\n          .find('.parsley-custom-error-message')\n          .remove();\n      }\n\n      // Show, hide, update failing constraints messages\n      for (var i = 0; i < diff.removed.length; i++)\n        this._removeError(diff.removed[i].assert.name);\n\n      for (i = 0; i < diff.added.length; i++)\n        this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\n\n      for (i = 0; i < diff.kept.length; i++)\n        this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\n    },\n\n\n    _addError: function (name, {message, assert}) {\n      this._insertErrorWrapper();\n      this._ui.$errorsWrapper\n        .addClass('filled')\n        .append(\n          $(this.options.errorTemplate)\n          .addClass('parsley-' + name)\n          .html(message || this._getErrorMessage(assert))\n        );\n    },\n\n    _updateError: function (name, {message, assert}) {\n      this._ui.$errorsWrapper\n        .addClass('filled')\n        .find('.parsley-' + name)\n        .html(message || this._getErrorMessage(assert));\n    },\n\n    _removeError: function (name) {\n      this._ui.$errorsWrapper\n        .removeClass('filled')\n        .find('.parsley-' + name)\n        .remove();\n    },\n\n    _getErrorMessage: function (constraint) {\n      var customConstraintErrorMessage = constraint.name + 'Message';\n\n      if ('undefined' !== typeof this.options[customConstraintErrorMessage])\n        return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n      return window.Parsley.getErrorMessage(constraint);\n    },\n\n    _buildUI: function () {\n      // UI could be already built or disabled\n      if (this._ui || false === this.options.uiEnabled)\n        return;\n\n      var _ui = {};\n\n      // Give field its Parsley id in DOM\n      this.$element.attr(this.options.namespace + 'id', this.__id__);\n\n      /** Generate important UI elements and store them in this **/\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n      _ui.$errorClassHandler = this._manageClassHandler();\n\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n      _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\n      _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n      _ui.lastValidationResult = [];\n      _ui.validationInformationVisible = false;\n\n      // Store it in this for later\n      this._ui = _ui;\n    },\n\n    // Determine which element will have `parsley-error` and `parsley-success` classes\n    _manageClassHandler: function () {\n      // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n      if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length)\n        return $(this.options.classHandler);\n\n      // Class handled could also be determined by function given in Parsley options\n      var $handler = this.options.classHandler.call(this, this);\n\n      // If this function returned a valid existing DOM element, go for it\n      if ('undefined' !== typeof $handler && $handler.length)\n        return $handler;\n\n      return this._inputHolder();\n    },\n\n    _inputHolder: function() {\n      // if simple element (input, texatrea, select...) it will perfectly host the classes and precede the error container\n      if (!this.options.multiple || this.$element.is('select'))\n        return this.$element;\n\n      // But if multiple element (radio, checkbox), that would be their parent\n      return this.$element.parent();\n    },\n\n    _insertErrorWrapper: function () {\n      var $errorsContainer;\n\n      // Nothing to do if already inserted\n      if (0 !== this._ui.$errorsWrapper.parent().length)\n        return this._ui.$errorsWrapper.parent();\n\n      if ('string' === typeof this.options.errorsContainer) {\n        if ($(this.options.errorsContainer).length)\n          return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);\n        else\n          ParsleyUtils__default.warn('The errors container `' + this.options.errorsContainer + '` does not exist in DOM');\n      } else if ('function' === typeof this.options.errorsContainer)\n        $errorsContainer = this.options.errorsContainer.call(this, this);\n\n      if ('undefined' !== typeof $errorsContainer && $errorsContainer.length)\n        return $errorsContainer.append(this._ui.$errorsWrapper);\n\n      return this._inputHolder().after(this._ui.$errorsWrapper);\n    },\n\n    _actualizeTriggers: function () {\n      var $toBind = this._findRelated();\n      var trigger;\n\n      // Remove Parsley events already bound on this field\n      $toBind.off('.Parsley');\n      if (this._failedOnce)\n        $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {\n          this._validateIfNeeded();\n        });\n      else if (trigger = ParsleyUtils__default.namespaceEvents(this.options.trigger, 'Parsley')) {\n        $toBind.on(trigger, event => {\n          this._validateIfNeeded(event);\n        });\n      }\n    },\n\n    _validateIfNeeded: function (event) {\n      // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n      // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n      if (event && /key|input/.test(event.type))\n        if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold)\n          return;\n\n      if (this.options.debounce) {\n        window.clearTimeout(this._debounced);\n        this._debounced = window.setTimeout(() => this.validate(), this.options.debounce);\n      } else\n        this.validate();\n    },\n\n    _resetUI: function () {\n      // Reset all event listeners\n      this._failedOnce = false;\n      this._actualizeTriggers();\n\n      // Nothing to do if UI never initialized for this field\n      if ('undefined' === typeof this._ui)\n        return;\n\n      // Reset all errors' li\n      this._ui.$errorsWrapper\n        .removeClass('filled')\n        .children()\n        .remove();\n\n      // Reset validation class\n      this._resetClass();\n\n      // Reset validation flags and last validation result\n      this._ui.lastValidationResult = [];\n      this._ui.validationInformationVisible = false;\n    },\n\n    _destroyUI: function () {\n      this._resetUI();\n\n      if ('undefined' !== typeof this._ui)\n        this._ui.$errorsWrapper.remove();\n\n      delete this._ui;\n    },\n\n    _successClass: function () {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n    },\n    _errorClass: function () {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n    },\n    _resetClass: function () {\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n    }\n  };\n\n  var ParsleyForm = function (element, domOptions, options) {\n    this.__class__ = 'ParsleyForm';\n\n    this.$element = $(element);\n    this.domOptions = domOptions;\n    this.options = options;\n    this.parent = window.Parsley;\n\n    this.fields = [];\n    this.validationResult = null;\n  };\n\n  var ParsleyForm__statusMapping = {pending: null, resolved: true, rejected: false};\n\n  ParsleyForm.prototype = {\n    onSubmitValidate: function (event) {\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n      if (true === event.parsley)\n        return;\n\n      // If we didn't come here through a submit button, use the first one in the form\n      var $submitSource = this._$submitSource || this.$element.find(ParsleyUtils__default._SubmitSelector).first();\n      this._$submitSource = null;\n      this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\n      if ($submitSource.is('[formnovalidate]'))\n        return;\n\n      var promise = this.whenValidate({event});\n\n      if ('resolved' === promise.state() && false !== this._trigger('submit')) {\n        // All good, let event go through. We make this distinction because browsers\n        // differ in their handling of `submit` being called from inside a submit event [#1047]\n      } else {\n        // Rejected or pending: cancel this submit\n        event.stopImmediatePropagation();\n        event.preventDefault();\n        if ('pending' === promise.state())\n          promise.done(() => { this._submit($submitSource); });\n      }\n    },\n\n    onSubmitButton: function(event) {\n      this._$submitSource = $(event.currentTarget);\n    },\n    // internal\n    // _submit submits the form, this time without going through the validations.\n    // Care must be taken to \"fake\" the actual submit button being clicked.\n    _submit: function ($submitSource) {\n      if (false === this._trigger('submit'))\n        return;\n      // Add submit button's data\n      if ($submitSource) {\n        var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\n        if (0 === $synthetic.length)\n          $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\n        $synthetic.attr({\n          name: $submitSource.attr('name'),\n          value: $submitSource.attr('value')\n        });\n      }\n\n      this.$element.trigger($.extend($.Event('submit'), {parsley: true}));\n    },\n\n    // Performs validation on fields while triggering events.\n    // @returns `true` if all validations succeeds, `false`\n    // if a failure is immediately detected, or `null`\n    // if dependant on a promise.\n    // Consider using `whenValidate` instead.\n    validate: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\n        var [group, force, event] = arguments;\n        options = {group, force, event};\n      }\n      return ParsleyForm__statusMapping[ this.whenValidate(options).state() ];\n    },\n\n    whenValidate: function ({group, force, event} = {}) {\n      this.submitEvent = event;\n      if (event) {\n        this.submitEvent = $.extend({}, event, {preventDefault: () => {\n          ParsleyUtils__default.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n          this.validationResult = false;\n        }});\n      }\n      this.validationResult = true;\n\n      // fire validate event to eventually modify things before every validation\n      this._trigger('validate');\n\n      // Refresh form DOM options and form's fields that could have changed\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(() => {\n        return $.map(this.fields, field => field.whenValidate({force, group}));\n      });\n\n      return ParsleyUtils__default.all(promises)\n        .done(  () => { this._trigger('success'); })\n        .fail(  () => {\n          this.validationResult = false;\n          this.focus();\n          this._trigger('error');\n        })\n        .always(() => { this._trigger('validated'); })\n        .pipe(...this._pipeAccordingToValidationResult());\n    },\n\n    // Iterate over refreshed fields, and stop on first failure.\n    // Returns `true` if all fields are valid, `false` if a failure is detected\n    // or `null` if the result depends on an unresolved promise.\n    // Prefer using `whenValid` instead.\n    isValid: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\n        var [group, force] = arguments;\n        options = {group, force};\n      }\n      return ParsleyForm__statusMapping[ this.whenValid(options).state() ];\n    },\n\n    // Iterate over refreshed fields and validate them.\n    // Returns a promise.\n    // A validation that immediately fails will interrupt the validations.\n    whenValid: function ({group, force} = {}) {\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(() => {\n        return $.map(this.fields, field => field.whenValid({group, force}));\n      });\n      return ParsleyUtils__default.all(promises);\n    },\n\n    _refreshFields: function () {\n      return this.actualizeOptions()._bindFields();\n    },\n\n    _bindFields: function () {\n      var oldFields = this.fields;\n\n      this.fields = [];\n      this.fieldsMappedById = {};\n\n      this._withoutReactualizingFormOptions(() => {\n        this.$element\n        .find(this.options.inputs)\n        .not(this.options.excluded)\n        .each((_, element) => {\n          var fieldInstance = new window.Parsley.Factory(element, {}, this);\n\n          // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\n          if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded))\n            if ('undefined' === typeof this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\n              this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\n              this.fields.push(fieldInstance);\n            }\n        });\n\n        $.each(ParsleyUtils__default.difference(oldFields, this.fields), (_, field) => {\n          field.reset();\n        });\n      });\n      return this;\n    },\n\n    // Internal only.\n    // Looping on a form's fields to do validation or similar\n    // will trigger reactualizing options on all of them, which\n    // in turn will reactualize the form's options.\n    // To avoid calling actualizeOptions so many times on the form\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\n    // the method actualizeOptions on this form while `fn` is called.\n    _withoutReactualizingFormOptions: function (fn) {\n      var oldActualizeOptions = this.actualizeOptions;\n      this.actualizeOptions = function () { return this; };\n      var result = fn();\n      this.actualizeOptions = oldActualizeOptions;\n      return result;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    // Returns true iff event is not interrupted and default not prevented.\n    _trigger: function (eventName) {\n      return this.trigger('form:' + eventName);\n    }\n\n  };\n\n  var ConstraintFactory = function (parsleyField, name, requirements, priority, isDomConstraint) {\n    if (!/ParsleyField/.test(parsleyField.__class__))\n      throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\n\n    var validatorSpec = window.Parsley._validatorRegistry.validators[name];\n    var validator = new ParsleyValidator(validatorSpec);\n\n    $.extend(this, {\n      validator: validator,\n      name: name,\n      requirements: requirements,\n      priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\n      isDomConstraint: true === isDomConstraint\n    });\n    this._parseRequirements(parsleyField.options);\n  };\n\n  var capitalize = function(str) {\n    var cap = str[0].toUpperCase();\n    return cap + str.slice(1);\n  };\n\n  ConstraintFactory.prototype = {\n    validate: function(value, instance) {\n      return this.validator.validate(value, ...this.requirementList, instance);\n    },\n\n    _parseRequirements: function(options) {\n      this.requirementList = this.validator.parseRequirements(this.requirements,\n        key => options[this.name + capitalize(key)]\n      );\n    }\n  };\n\n  var ParsleyField = function (field, domOptions, options, parsleyFormInstance) {\n    this.__class__ = 'ParsleyField';\n\n    this.$element = $(field);\n\n    // Set parent if we have one\n    if ('undefined' !== typeof parsleyFormInstance) {\n      this.parent = parsleyFormInstance;\n    }\n\n    this.options = options;\n    this.domOptions = domOptions;\n\n    // Initialize some properties\n    this.constraints = [];\n    this.constraintsByName = {};\n    this.validationResult = true;\n\n    // Bind constraints\n    this._bindConstraints();\n  };\n\n  var parsley_field__statusMapping = {pending: null, resolved: true, rejected: false};\n\n  ParsleyField.prototype = {\n    // # Public API\n    // Validate field and trigger some events for mainly `ParsleyUI`\n    // @returns `true`, an array of the validators that failed, or\n    // `null` if validation is not finished. Prefer using whenValidate\n    validate: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\n        options = {options};\n      }\n      var promise = this.whenValidate(options);\n      if (!promise)  // If excluded with `group` option\n        return true;\n      switch (promise.state()) {\n        case 'pending': return null;\n        case 'resolved': return true;\n        case 'rejected': return this.validationResult;\n      }\n    },\n\n    // Validate field and trigger some events for mainly `ParsleyUI`\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if field is not in the given `group`.\n    whenValidate: function ({force, group} =  {}) {\n      // do not validate a field if not the same as given validation group\n      this.refreshConstraints();\n      if (group && !this._isInGroup(group))\n        return;\n\n      this.value = this.getValue();\n\n      // Field Validate event. `this.value` could be altered for custom needs\n      this._trigger('validate');\n\n      return this.whenValid({force, value: this.value, _refreshed: true})\n        .always(() => { this._reflowUI(); })\n        .done(() =>   { this._trigger('success'); })\n        .fail(() =>   { this._trigger('error'); })\n        .always(() => { this._trigger('validated'); })\n        .pipe(...this._pipeAccordingToValidationResult());\n    },\n\n    hasConstraints: function () {\n      return 0 !== this.constraints.length;\n    },\n\n    // An empty optional field does not need validation\n    needsValidation: function (value) {\n      if ('undefined' === typeof value)\n        value = this.getValue();\n\n      // If a field is empty and not required, it is valid\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n      if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\n        return false;\n\n      return true;\n    },\n\n    _isInGroup: function (group) {\n      if ($.isArray(this.options.group))\n        return -1 !== $.inArray(group, this.options.group);\n      return this.options.group === group;\n    },\n\n    // Just validate field. Do not trigger any event.\n    // Returns `true` iff all constraints pass, `false` if there are failures,\n    // or `null` if the result can not be determined yet (depends on a promise)\n    // See also `whenValid`.\n    isValid: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\n        var [force, value] = arguments;\n        options = {force, value};\n      }\n      var promise = this.whenValid(options);\n      if (!promise) // Excluded via `group`\n        return true;\n      return parsley_field__statusMapping[promise.state()];\n    },\n\n    // Just validate field. Do not trigger any event.\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if the field is not in the given `group`.\n    // The argument `force` will force validation of empty fields.\n    // If a `value` is given, it will be validated instead of the value of the input.\n    whenValid: function ({force = false, value, group, _refreshed} = {}) {\n      // Recompute options and rebind constraints to have latest changes\n      if (!_refreshed)\n        this.refreshConstraints();\n      // do not validate a field if not the same as given validation group\n      if (group && !this._isInGroup(group))\n        return;\n\n      this.validationResult = true;\n\n      // A field without constraint is valid\n      if (!this.hasConstraints())\n        return $.when();\n\n      // Value could be passed as argument, needed to add more power to 'field:validate'\n      if ('undefined' === typeof value || null === value)\n        value = this.getValue();\n\n      if (!this.needsValidation(value) && true !== force)\n        return $.when();\n\n      var groupedConstraints = this._getGroupedConstraints();\n      var promises = [];\n      $.each(groupedConstraints, (_, constraints) => {\n        // Process one group of constraints at a time, we validate the constraints\n        // and combine the promises together.\n        var promise = ParsleyUtils__default.all(\n          $.map(constraints, constraint => this._validateConstraint(value, constraint))\n        );\n        promises.push(promise);\n        if (promise.state() === 'rejected')\n          return false; // Interrupt processing if a group has already failed\n      });\n      return ParsleyUtils__default.all(promises);\n    },\n\n    // @returns a promise\n    _validateConstraint: function(value, constraint) {\n      var result = constraint.validate(value, this);\n      // Map false to a failed promise\n      if (false === result)\n        result = $.Deferred().reject();\n      // Make sure we return a promise and that we record failures\n      return ParsleyUtils__default.all([result]).fail(errorMessage => {\n        if (!(this.validationResult instanceof Array))\n          this.validationResult = [];\n        this.validationResult.push({\n          assert: constraint,\n          errorMessage: 'string' === typeof errorMessage && errorMessage\n        });\n      });\n    },\n\n    // @returns Parsley field computed value that could be overrided or configured in DOM\n    getValue: function () {\n      var value;\n\n      // Value could be overriden in DOM or with explicit options\n      if ('function' === typeof this.options.value)\n        value = this.options.value(this);\n      else if ('undefined' !== typeof this.options.value)\n        value = this.options.value;\n      else\n        value = this.$element.val();\n\n      // Handle wrong DOM or configurations\n      if ('undefined' === typeof value || null === value)\n        return '';\n\n      return this._handleWhitespace(value);\n    },\n\n    // Actualize options that could have change since previous validation\n    // Re-bind accordingly constraints (could be some new, removed or updated)\n    refreshConstraints: function () {\n      return this.actualizeOptions()._bindConstraints();\n    },\n\n    /**\n    * Add a new constraint to a field\n    *\n    * @param {String}   name\n    * @param {Mixed}    requirements      optional\n    * @param {Number}   priority          optional\n    * @param {Boolean}  isDomConstraint   optional\n    */\n    addConstraint: function (name, requirements, priority, isDomConstraint) {\n\n      if (window.Parsley._validatorRegistry.validators[name]) {\n        var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\n\n        // if constraint already exist, delete it and push new version\n        if ('undefined' !== this.constraintsByName[constraint.name])\n          this.removeConstraint(constraint.name);\n\n        this.constraints.push(constraint);\n        this.constraintsByName[constraint.name] = constraint;\n      }\n\n      return this;\n    },\n\n    // Remove a constraint\n    removeConstraint: function (name) {\n      for (var i = 0; i < this.constraints.length; i++)\n        if (name === this.constraints[i].name) {\n          this.constraints.splice(i, 1);\n          break;\n        }\n      delete this.constraintsByName[name];\n      return this;\n    },\n\n    // Update a constraint (Remove + re-add)\n    updateConstraint: function (name, parameters, priority) {\n      return this.removeConstraint(name)\n        .addConstraint(name, parameters, priority);\n    },\n\n    // # Internals\n\n    // Internal only.\n    // Bind constraints from config + options + DOM\n    _bindConstraints: function () {\n      var constraints = [];\n      var constraintsByName = {};\n\n      // clean all existing DOM constraints to only keep javascript user constraints\n      for (var i = 0; i < this.constraints.length; i++)\n        if (false === this.constraints[i].isDomConstraint) {\n          constraints.push(this.constraints[i]);\n          constraintsByName[this.constraints[i].name] = this.constraints[i];\n        }\n\n      this.constraints = constraints;\n      this.constraintsByName = constraintsByName;\n\n      // then re-add Parsley DOM-API constraints\n      for (var name in this.options)\n        this.addConstraint(name, this.options[name], undefined, true);\n\n      // finally, bind special HTML5 constraints\n      return this._bindHtml5Constraints();\n    },\n\n    // Internal only.\n    // Bind specific HTML5 constraints to be HTML5 compliant\n    _bindHtml5Constraints: function () {\n      // html5 required\n      if (this.$element.attr('required'))\n        this.addConstraint('required', true, undefined, true);\n\n      // html5 pattern\n      if ('string' === typeof this.$element.attr('pattern'))\n        this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\n\n      // range\n      if (this.$element.attr('type') !== 'date' && 'undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max'))\n        this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\n\n      // HTML5 min\n      else if (this.$element.attr('type') !== 'date' && 'undefined' !== typeof this.$element.attr('min'))\n        this.addConstraint('min', this.$element.attr('min'), undefined, true);\n\n      // HTML5 max\n      else if (this.$element.attr('type') !== 'date' && 'undefined' !== typeof this.$element.attr('max'))\n        this.addConstraint('max', this.$element.attr('max'), undefined, true);\n\n\n      // length\n      if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength'))\n        this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\n\n      // HTML5 minlength\n      else if ('undefined' !== typeof this.$element.attr('minlength'))\n        this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\n\n      // HTML5 maxlength\n      else if ('undefined' !== typeof this.$element.attr('maxlength'))\n        this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\n\n\n      // html5 types\n      var type = this.$element.attr('type');\n\n      if ('undefined' === typeof type)\n        return this;\n\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n      if ('number' === type) {\n        return this.addConstraint('type', ['number', {\n          step: this.$element.attr('step') || '1',\n          base: this.$element.attr('min') || this.$element.attr('value')\n        }], undefined, true);\n      // Regular other HTML5 supported types\n      } else if (/^(email|url|range)$/i.test(type)) {\n        return this.addConstraint('type', type, undefined, true);\n      }\n      return this;\n    },\n\n    // Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function () {\n      if ('undefined' === typeof this.constraintsByName.required)\n        return false;\n\n      return false !== this.constraintsByName.required.requirements;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    _trigger: function (eventName) {\n      return this.trigger('field:' + eventName);\n    },\n\n    // Internal only\n    // Handles whitespace in a value\n    // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n    // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n    _handleWhitespace: function (value) {\n      if (true === this.options.trimValue)\n        ParsleyUtils__default.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n      if ('squish' === this.options.whitespace)\n        value = value.replace(/\\s{2,}/g, ' ');\n\n      if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\n        value = ParsleyUtils__default.trimString(value);\n\n      return value;\n    },\n\n    // Internal only.\n    // Returns the constraints, grouped by descending priority.\n    // The result is thus an array of arrays of constraints.\n    _getGroupedConstraints: function () {\n      if (false === this.options.priorityEnabled)\n        return [this.constraints];\n\n      var groupedConstraints = [];\n      var index = {};\n\n      // Create array unique of priorities\n      for (var i = 0; i < this.constraints.length; i++) {\n        var p = this.constraints[i].priority;\n        if (!index[p])\n          groupedConstraints.push(index[p] = []);\n        index[p].push(this.constraints[i]);\n      }\n      // Sort them by priority DESC\n      groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\n\n      return groupedConstraints;\n    }\n\n  };\n\n  var parsley_field = ParsleyField;\n\n  var ParsleyMultiple = function () {\n    this.__class__ = 'ParsleyFieldMultiple';\n  };\n\n  ParsleyMultiple.prototype = {\n    // Add new `$element` sibling for multiple field\n    addElement: function ($element) {\n      this.$elements.push($element);\n\n      return this;\n    },\n\n    // See `ParsleyField.refreshConstraints()`\n    refreshConstraints: function () {\n      var fieldConstraints;\n\n      this.constraints = [];\n\n      // Select multiple special treatment\n      if (this.$element.is('select')) {\n        this.actualizeOptions()._bindConstraints();\n\n        return this;\n      }\n\n      // Gather all constraints for each input in the multiple group\n      for (var i = 0; i < this.$elements.length; i++) {\n\n        // Check if element have not been dynamically removed since last binding\n        if (!$('html').has(this.$elements[i]).length) {\n          this.$elements.splice(i, 1);\n          continue;\n        }\n\n        fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\n\n        for (var j = 0; j < fieldConstraints.length; j++)\n          this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n      }\n\n      return this;\n    },\n\n    // See `ParsleyField.getValue()`\n    getValue: function () {\n      // Value could be overriden in DOM\n      if ('function' === typeof this.options.value)\n        return this.options.value(this);\n      else if ('undefined' !== typeof this.options.value)\n        return this.options.value;\n\n      // Radio input case\n      if (this.$element.is('input[type=radio]'))\n        return this._findRelated().filter(':checked').val() || '';\n\n      // checkbox input case\n      if (this.$element.is('input[type=checkbox]')) {\n        var values = [];\n\n        this._findRelated().filter(':checked').each(function () {\n          values.push($(this).val());\n        });\n\n        return values;\n      }\n\n      // Select multiple case\n      if (this.$element.is('select') && null === this.$element.val())\n        return [];\n\n      // Default case that should never happen\n      return this.$element.val();\n    },\n\n    _init: function () {\n      this.$elements = [this.$element];\n\n      return this;\n    }\n  };\n\n  var ParsleyFactory = function (element, options, parsleyFormInstance) {\n    this.$element = $(element);\n\n    // If the element has already been bound, returns its saved Parsley instance\n    var savedparsleyFormInstance = this.$element.data('Parsley');\n    if (savedparsleyFormInstance) {\n\n      // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\n      if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n        savedparsleyFormInstance.parent = parsleyFormInstance;\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n      }\n\n      if ('object' === typeof options) {\n        $.extend(savedparsleyFormInstance.options, options);\n      }\n\n      return savedparsleyFormInstance;\n    }\n\n    // Parsley must be instantiated with a DOM element or jQuery $element\n    if (!this.$element.length)\n      throw new Error('You must bind Parsley on an existing element.');\n\n    if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__)\n      throw new Error('Parent instance must be a ParsleyForm instance');\n\n    this.parent = parsleyFormInstance || window.Parsley;\n    return this.init(options);\n  };\n\n  ParsleyFactory.prototype = {\n    init: function (options) {\n      this.__class__ = 'Parsley';\n      this.__version__ = '2.6.3';\n      this.__id__ = ParsleyUtils__default.generateID();\n\n      // Pre-compute options\n      this._resetOptions(options);\n\n      // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n      if (this.$element.is('form') || (ParsleyUtils__default.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\n        return this.bind('parsleyForm');\n\n      // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n    },\n\n    isMultiple: function () {\n      return (this.$element.is('input[type=radio], input[type=checkbox]')) || (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple'));\n    },\n\n    // Multiples fields are a real nightmare :(\n    // Maybe some refactoring would be appreciated here...\n    handleMultiple: function () {\n      var name;\n      var multiple;\n      var parsleyMultipleInstance;\n\n      // Handle multiple name\n      if (this.options.multiple)\n        ; // We already have our 'multiple' identifier\n      else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length)\n        this.options.multiple = name = this.$element.attr('name');\n      else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length)\n        this.options.multiple = this.$element.attr('id');\n\n      // Special select multiple input\n      if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\n        this.options.multiple = this.options.multiple || this.__id__;\n        return this.bind('parsleyFieldMultiple');\n\n      // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n      } else if (!this.options.multiple) {\n        ParsleyUtils__default.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n        return this;\n      }\n\n      // Remove special chars\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n      if ('undefined' !== typeof name) {\n        $('input[name=\"' + name + '\"]').each((i, input) => {\n          if ($(input).is('input[type=radio], input[type=checkbox]'))\n            $(input).attr(this.options.namespace + 'multiple', this.options.multiple);\n        });\n      }\n\n      // Check here if we don't already have a related multiple instance saved\n      var $previouslyRelated = this._findRelated();\n      for (var i = 0; i < $previouslyRelated.length; i++) {\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n        if ('undefined' !== typeof parsleyMultipleInstance) {\n\n          if (!this.$element.data('ParsleyFieldMultiple')) {\n            parsleyMultipleInstance.addElement(this.$element);\n          }\n\n          break;\n        }\n      }\n\n      // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\n      // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\n      this.bind('parsleyField', true);\n\n      return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n    },\n\n    // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\n    bind: function (type, doNotStore) {\n      var parsleyInstance;\n\n      switch (type) {\n        case 'parsleyForm':\n          parsleyInstance = $.extend(\n            new ParsleyForm(this.$element, this.domOptions, this.options),\n            new ParsleyAbstract(),\n            window.ParsleyExtend\n          )._bindFields();\n          break;\n        case 'parsleyField':\n          parsleyInstance = $.extend(\n            new parsley_field(this.$element, this.domOptions, this.options, this.parent),\n            new ParsleyAbstract(),\n            window.ParsleyExtend\n          );\n          break;\n        case 'parsleyFieldMultiple':\n          parsleyInstance = $.extend(\n            new parsley_field(this.$element, this.domOptions, this.options, this.parent),\n            new ParsleyMultiple(),\n            new ParsleyAbstract(),\n            window.ParsleyExtend\n          )._init();\n          break;\n        default:\n          throw new Error(type + 'is not a supported Parsley type');\n      }\n\n      if (this.options.multiple)\n        ParsleyUtils__default.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\n\n      if ('undefined' !== typeof doNotStore) {\n        this.$element.data('ParsleyFieldMultiple', parsleyInstance);\n\n        return parsleyInstance;\n      }\n\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n      this.$element.data('Parsley', parsleyInstance);\n\n      // Tell the world we have a new ParsleyForm or ParsleyField instance!\n      parsleyInstance._actualizeTriggers();\n      parsleyInstance._trigger('init');\n\n      return parsleyInstance;\n    }\n  };\n\n  var vernums = $.fn.jquery.split('.');\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n  }\n  if (!vernums.forEach) {\n    ParsleyUtils__default.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n  }\n  // Inherit `on`, `off` & `trigger` to Parsley:\n  var Parsley = $.extend(new ParsleyAbstract(), {\n      $element: $(document),\n      actualizeOptions: null,\n      _resetOptions: null,\n      Factory: ParsleyFactory,\n      version: '2.6.3'\n    });\n\n  // Supplement ParsleyField and Form with ParsleyAbstract\n  // This way, the constructors will have access to those methods\n  $.extend(parsley_field.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);\n  $.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);\n  // Inherit actualizeOptions and _resetOptions:\n  $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\n\n  // ### jQuery API\n  // `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n  $.fn.parsley = $.fn.psly = function (options) {\n    if (this.length > 1) {\n      var instances = [];\n\n      this.each(function () {\n        instances.push($(this).parsley(options));\n      });\n\n      return instances;\n    }\n\n    // Return undefined if applied to non existing DOM element\n    if (!$(this).length) {\n      ParsleyUtils__default.warn('You must bind Parsley on an existing element.');\n\n      return;\n    }\n\n    return new ParsleyFactory(this, options);\n  };\n\n  // ### ParsleyField and ParsleyForm extension\n  // Ensure the extension is now defined if it wasn't previously\n  if ('undefined' === typeof window.ParsleyExtend)\n    window.ParsleyExtend = {};\n\n  // ### Parsley config\n  // Inherit from ParsleyDefault, and copy over any existing values\n  Parsley.options = $.extend(ParsleyUtils__default.objectCreate(ParsleyDefaults), window.ParsleyConfig);\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n  // ### Globals\n  window.Parsley = window.psly = Parsley;\n  window.ParsleyUtils = ParsleyUtils__default;\n\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\n  var registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\n  window.ParsleyValidator = {};\n  $.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\n    window.Parsley[method] = $.proxy(registry, method);\n    window.ParsleyValidator[method] = function () {\n      ParsleyUtils__default.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\n      return window.Parsley[method](...arguments);\n    };\n  });\n\n  // ### ParsleyUI\n  // Deprecated global object\n  window.Parsley.UI = ParsleyUI;\n  window.ParsleyUI = {\n    removeError: function (instance, name, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      ParsleyUtils__default.warnOnce(`Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n      return instance.removeError(name, {updateClass});\n    },\n    getErrorsMessages: function (instance) {\n      ParsleyUtils__default.warnOnce(`Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly.`);\n      return instance.getErrorsMessages();\n    }\n  };\n  $.each('addError updateError'.split(' '), function (i, method) {\n    window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      ParsleyUtils__default.warnOnce(`Accessing ParsleyUI is deprecated. Call '${method}' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n      return instance[method](name, {message, assert, updateClass});\n    };\n  });\n\n  // ### PARSLEY auto-binding\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\n  if (false !== window.ParsleyConfig.autoBind) {\n    $(function () {\n      // Works only on `data-parsley-validate`.\n      if ($('[data-parsley-validate]').length)\n        $('[data-parsley-validate]').parsley();\n    });\n  }\n\n  var o = $({});\n  var deprecated = function () {\n    ParsleyUtils__default.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n  };\n\n  // Returns an event handler that calls `fn` with the arguments it expects\n  function adapt(fn, context) {\n    // Store to allow unbinding\n    if (!fn.parsleyAdaptedCallback) {\n      fn.parsleyAdaptedCallback = function () {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(this);\n        fn.apply(context || o, args);\n      };\n    }\n    return fn.parsleyAdaptedCallback;\n  }\n\n  var eventPrefix = 'parsley:';\n  // Converts 'parsley:form:validate' into 'form:validate'\n  function eventName(name) {\n    if (name.lastIndexOf(eventPrefix, 0) === 0)\n      return name.substr(eventPrefix.length);\n    return name;\n  }\n\n  // $.listen is deprecated. Use Parsley.on instead.\n  $.listen = function (name, callback) {\n    var context;\n    deprecated();\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n      context = arguments[1];\n      callback = arguments[2];\n    }\n\n    if ('function' !== typeof callback)\n      throw new Error('Wrong parameters');\n\n    window.Parsley.on(eventName(name), adapt(callback, context));\n  };\n\n  $.listenTo = function (instance, name, fn) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm))\n      throw new Error('Must give Parsley instance');\n\n    if ('string' !== typeof name || 'function' !== typeof fn)\n      throw new Error('Wrong parameters');\n\n    instance.on(eventName(name), adapt(fn));\n  };\n\n  $.unsubscribe = function (name, fn) {\n    deprecated();\n    if ('string' !== typeof name || 'function' !== typeof fn)\n      throw new Error('Wrong arguments');\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n  };\n\n  $.unsubscribeTo = function (instance, name) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm))\n      throw new Error('Must give Parsley instance');\n    instance.off(eventName(name));\n  };\n\n  $.unsubscribeAll = function (name) {\n    deprecated();\n    window.Parsley.off(eventName(name));\n    $('form,input,textarea,select').each(function () {\n      var instance = $(this).data('Parsley');\n      if (instance) {\n        instance.off(eventName(name));\n      }\n    });\n  };\n\n  // $.emit is deprecated. Use jQuery events instead.\n  $.emit = function (name, instance) {\n    deprecated();\n    var instanceGiven = (instance instanceof parsley_field) || (instance instanceof ParsleyForm);\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n    args.unshift(eventName(name));\n    if (!instanceGiven) {\n      instance = window.Parsley;\n    }\n    instance.trigger(...args);\n  };\n\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\n    asyncValidators: {\n      'default': {\n        fn: function (xhr) {\n          // By default, only status 2xx are deemed successful.\n          // Note: we use status instead of state() because responses with status 200\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\n          // result in state() === 'rejected'.\n          return xhr.status >= 200 && xhr.status < 300;\n        },\n        url: false\n      },\n      reverse: {\n        fn: function (xhr) {\n          // If reverse option is set, a failing ajax request is considered successful\n          return xhr.status < 200 || xhr.status >= 300;\n        },\n        url: false\n      }\n    },\n\n    addAsyncValidator: function (name, fn, url, options) {\n      Parsley.asyncValidators[name] = {\n        fn: fn,\n        url: url || false,\n        options: options || {}\n      };\n\n      return this;\n    }\n\n  });\n\n  Parsley.addValidator('remote', {\n    requirementType: {\n      '': 'string',\n      'validator': 'string',\n      'reverse': 'boolean',\n      'options': 'object'\n    },\n\n    validateString: function (value, url, options, instance) {\n      var data = {};\n      var ajaxOptions;\n      var csr;\n      var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n      if ('undefined' === typeof Parsley.asyncValidators[validator])\n        throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n      url = Parsley.asyncValidators[validator].url || url;\n\n      // Fill current value\n      if (url.indexOf('{value}') > -1) {\n        url = url.replace('{value}', encodeURIComponent(value));\n      } else {\n        data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\n      }\n\n      // Merge options passed in from the function with the ones in the attribute\n      var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\n\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n      ajaxOptions = $.extend(true, {}, {\n        url: url,\n        data: data,\n        type: 'GET'\n      }, remoteOptions);\n\n      // Generate store key based on ajax options\n      instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n      csr = $.param(ajaxOptions);\n\n      // Initialise querry cache\n      if ('undefined' === typeof Parsley._remoteCache)\n        Parsley._remoteCache = {};\n\n      // Try to retrieve stored xhr\n      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n      var handleXhr = function () {\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n        if (!result) // Map falsy results to rejected promise\n          result = $.Deferred().reject();\n        return $.when(result);\n      };\n\n      return xhr.then(handleXhr, handleXhr);\n    },\n\n    priority: -1\n  });\n\n  Parsley.on('form:submit', function () {\n    Parsley._remoteCache = {};\n  });\n\n  window.ParsleyExtend.addAsyncValidator = function () {\n    ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n    return Parsley.addAsyncValidator(...arguments);\n  };\n\n  // This is included with the Parsley library itself,\n  // thus there is no use in adding it to your project.\n  Parsley.addMessages('en', {\n    defaultMessage: \"This value seems to be invalid.\",\n    type: {\n      email:        \"This value should be a valid email.\",\n      url:          \"This value should be a valid url.\",\n      number:       \"This value should be a valid number.\",\n      integer:      \"This value should be a valid integer.\",\n      digits:       \"This value should be digits.\",\n      alphanum:     \"This value should be alphanumeric.\"\n    },\n    notblank:       \"This value should not be blank.\",\n    required:       \"This value is required.\",\n    pattern:        \"This value seems to be invalid.\",\n    min:            \"This value should be greater than or equal to %s.\",\n    max:            \"This value should be lower than or equal to %s.\",\n    range:          \"This value should be between %s and %s.\",\n    minlength:      \"This value is too short. It should have %s characters or more.\",\n    maxlength:      \"This value is too long. It should have %s characters or fewer.\",\n    length:         \"This value length is invalid. It should be between %s and %s characters long.\",\n    mincheck:       \"You must select at least %s choices.\",\n    maxcheck:       \"You must select %s choices or fewer.\",\n    check:          \"You must select between %s and %s choices.\",\n    equalto:        \"This value should be the same.\"\n  });\n\n  Parsley.setLocale('en');\n\n  /**\n   * inputevent - Alleviate browser bugs for input events\n   * https://github.com/marcandre/inputevent\n   * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)\n   * @author Marc-Andre Lafortune <github@marc-andre.ca>\n   * @license MIT\n   */\n\n  function InputEvent() {\n    let globals = window || global;\n\n    // Slightly odd way construct our object. This way methods are force bound.\n    // Used to test for duplicate library.\n    $.extend(this, {\n\n      // For browsers that do not support isTrusted, assumes event is native.\n      isNativeEvent: evt => {\n        return evt.originalEvent && evt.originalEvent.isTrusted !== false;\n      },\n\n      fakeInputEvent: evt => {\n        if (this.isNativeEvent(evt)) {\n          $(evt.target).trigger('input');\n        }\n      },\n\n      misbehaves: evt => {\n        if (this.isNativeEvent(evt)) {\n          this.behavesOk(evt);\n          $(document)\n            .on('change.inputevent', evt.data.selector, this.fakeInputEvent);\n          this.fakeInputEvent(evt);\n        }\n      },\n\n      behavesOk: evt => {\n        if (this.isNativeEvent(evt)) {\n          $(document) // Simply unbinds the testing handler\n            .off('input.inputevent', evt.data.selector, this.behavesOk)\n            .off('change.inputevent', evt.data.selector, this.misbehaves);\n        }\n      },\n\n      // Bind the testing handlers\n      install: () => {\n        if (globals.inputEventPatched) {\n          return;\n        }\n        globals.inputEventPatched = '0.0.3';\n        for (let selector of ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]', 'input[type=\"file\"]']) {\n          $(document)\n            .on('input.inputevent', selector, {selector}, this.behavesOk)\n            .on('change.inputevent', selector, {selector}, this.misbehaves);\n        }\n      },\n\n      uninstall: () => {\n        delete globals.inputEventPatched;\n        $(document).off('.inputevent');\n      }\n\n    });\n  };\n\n  var inputevent = new InputEvent();\n\n  inputevent.install();\n\n  var parsley = Parsley;\n\n  return parsley;\n\n}));\n","import $ from 'jquery';\n\nvar globalID = 1;\nvar pastWarnings = {};\n\nvar ParsleyUtils = {\n  // Parsley DOM-API\n  // returns object from dom attributes and values\n  attr: function ($element, namespace, obj) {\n    var i;\n    var attribute;\n    var attributes;\n    var regex = new RegExp('^' + namespace, 'i');\n\n    if ('undefined' === typeof obj)\n      obj = {};\n    else {\n      // Clear all own properties. This won't affect prototype's values\n      for (i in obj) {\n        if (obj.hasOwnProperty(i))\n          delete obj[i];\n      }\n    }\n\n    if ('undefined' === typeof $element || 'undefined' === typeof $element[0])\n      return obj;\n\n    attributes = $element[0].attributes;\n    for (i = attributes.length; i--; ) {\n      attribute = attributes[i];\n\n      if (attribute && attribute.specified && regex.test(attribute.name)) {\n        obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n      }\n    }\n\n    return obj;\n  },\n\n  checkAttr: function ($element, namespace, checkAttr) {\n    return $element.is('[' + namespace + checkAttr + ']');\n  },\n\n  setAttr: function ($element, namespace, attr, value) {\n    $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\n  },\n\n  generateID: function () {\n    return '' + globalID++;\n  },\n\n  /** Third party functions **/\n  // Zepto deserialize function\n  deserializeValue: function (value) {\n    var num;\n\n    try {\n      return value ?\n        value == \"true\" ||\n        (value == \"false\" ? false :\n        value == \"null\" ? null :\n        !isNaN(num = Number(value)) ? num :\n        /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\n        value)\n        : value;\n    } catch (e) { return value; }\n  },\n\n  // Zepto camelize function\n  camelize: function (str) {\n    return str.replace(/-+(.)?/g, function (match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n  },\n\n  // Zepto dasherize function\n  dasherize: function (str) {\n    return str.replace(/::/g, '/')\n      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n      .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n      .replace(/_/g, '-')\n      .toLowerCase();\n  },\n\n  warn: function () {\n    if (window.console && 'function' === typeof window.console.warn)\n      window.console.warn(...arguments);\n  },\n\n  warnOnce: function(msg) {\n    if (!pastWarnings[msg]) {\n      pastWarnings[msg] = true;\n      this.warn(...arguments);\n    }\n  },\n\n  _resetWarnings: function () {\n    pastWarnings = {};\n  },\n\n  trimString: function(string) {\n    return string.replace(/^\\s+|\\s+$/g, '');\n  },\n\n  namespaceEvents: function(events, namespace) {\n    events = this.trimString(events || '').split(/\\s+/);\n    if (!events[0])\n      return '';\n    return $.map(events, evt => `${evt}.${namespace}`).join(' ');\n  },\n\n  difference: function(array, remove) {\n    // This is O(N^2), should be optimized\n    let result = [];\n    $.each(array, (_, elem) => {\n      if (remove.indexOf(elem) == -1)\n        result.push(elem);\n    });\n    return result;\n  },\n\n  // Alter-ego to native Promise.all, but for jQuery\n  all: function(promises) {\n    // jQuery treats $.when() and $.when(singlePromise) differently; let's avoid that and add spurious elements\n    return $.when(...promises, 42, 42);\n  },\n\n  // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n  objectCreate: Object.create || (function () {\n    var Object = function () {};\n    return function (prototype) {\n      if (arguments.length > 1) {\n        throw Error('Second argument not supported');\n      }\n      if (typeof prototype != 'object') {\n        throw TypeError('Argument must be an object');\n      }\n      Object.prototype = prototype;\n      var result = new Object();\n      Object.prototype = null;\n      return result;\n    };\n  })(),\n\n  _SubmitSelector: 'input[type=\"submit\"], button:submit'\n};\n\nexport default ParsleyUtils;\n","// All these options could be overriden and specified directly in DOM using\n// `data-parsley-` default DOM-API\n// eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n// eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\nvar ParsleyDefaults = {\n  // ### General\n\n  // Default data-namespace for DOM API\n  namespace: 'data-parsley-',\n\n  // Supported inputs by default\n  inputs: 'input, textarea, select',\n\n  // Excluded inputs by default\n  excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n  // Stop validating field on highest priority failing constraint\n  priorityEnabled: true,\n\n  // ### Field only\n\n  // identifier used to group together inputs (e.g. radio buttons...)\n  multiple: null,\n\n  // identifier (or array of identifiers) used to validate only a select group of inputs\n  group: null,\n\n  // ### UI\n  // Enable\\Disable error messages\n  uiEnabled: true,\n\n  // Key events threshold before validation\n  validationThreshold: 3,\n\n  // Focused field on form validation error. 'first'|'last'|'none'\n  focus: 'first',\n\n  // event(s) that will trigger validation before first failure. eg: `input`...\n  trigger: false,\n\n  // event(s) that will trigger validation after first failure.\n  triggerAfterFailure: 'input',\n\n  // Class that would be added on every failing validation Parsley field\n  errorClass: 'parsley-error',\n\n  // Same for success validation\n  successClass: 'parsley-success',\n\n  // Return the `$element` that will receive these above success or error classes\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\n  classHandler: function (ParsleyField) {},\n\n  // Return the `$element` where errors will be appended\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\n  errorsContainer: function (ParsleyField) {},\n\n  // ul elem that would receive errors' list\n  errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n\n  // li elem that would receive error message\n  errorTemplate: '<li></li>'\n};\n\nexport default ParsleyDefaults;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\n\nvar ParsleyAbstract = function () {\n  this.__id__ = ParsleyUtils.generateID();\n};\n\nParsleyAbstract.prototype = {\n  asyncSupport: true, // Deprecated\n\n  _pipeAccordingToValidationResult: function () {\n    var pipe = () => {\n      var r = $.Deferred();\n      if (true !== this.validationResult)\n        r.reject();\n      return r.resolve().promise();\n    };\n    return [pipe, pipe];\n  },\n\n  actualizeOptions: function () {\n    ParsleyUtils.attr(this.$element, this.options.namespace, this.domOptions);\n    if (this.parent && this.parent.actualizeOptions)\n      this.parent.actualizeOptions();\n    return this;\n  },\n\n  _resetOptions: function (initOptions) {\n    this.domOptions = ParsleyUtils.objectCreate(this.parent.options);\n    this.options = ParsleyUtils.objectCreate(this.domOptions);\n    // Shallow copy of ownProperties of initOptions:\n    for (var i in initOptions) {\n      if (initOptions.hasOwnProperty(i))\n        this.options[i] = initOptions[i];\n    }\n    this.actualizeOptions();\n  },\n\n  _listeners: null,\n\n  // Register a callback for the given event name\n  // Callback is called with context as the first argument and the `this`\n  // The context is the current parsley instance, or window.Parsley if global\n  // A return value of `false` will interrupt the calls\n  on: function (name, fn) {\n    this._listeners = this._listeners || {};\n    var queue = this._listeners[name] = this._listeners[name] || [];\n    queue.push(fn);\n\n    return this;\n  },\n\n  // Deprecated. Use `on` instead\n  subscribe: function(name, fn) {\n    $.listenTo(this, name.toLowerCase(), fn);\n  },\n\n  // Unregister a callback (or all if none is given) for the given event name\n  off: function (name, fn) {\n    var queue = this._listeners && this._listeners[name];\n    if (queue) {\n      if (!fn) {\n        delete this._listeners[name];\n      } else {\n        for (var i = queue.length; i--; )\n          if (queue[i] === fn)\n            queue.splice(i, 1);\n      }\n    }\n    return this;\n  },\n\n  // Deprecated. Use `off`\n  unsubscribe: function(name, fn) {\n    $.unsubscribeTo(this, name.toLowerCase());\n  },\n\n  // Trigger an event of the given name\n  // A return value of `false` interrupts the callback chain\n  // Returns false if execution was interrupted\n  trigger: function (name, target, extraArg) {\n    target = target || this;\n    var queue = this._listeners && this._listeners[name];\n    var result;\n    var parentResult;\n    if (queue) {\n      for (var i = queue.length; i--; ) {\n        result = queue[i].call(target, target, extraArg);\n        if (result === false) return result;\n      }\n    }\n    if (this.parent) {\n      return this.parent.trigger(name, target, extraArg);\n    }\n    return true;\n  },\n\n  // Reset UI\n  reset: function () {\n    // Field case: just emit a reset event for UI\n    if ('ParsleyForm' !== this.__class__) {\n      this._resetUI();\n      return this._trigger('reset');\n    }\n\n    // Form case: emit a reset event for each field\n    for (var i = 0; i < this.fields.length; i++)\n      this.fields[i].reset();\n\n    this._trigger('reset');\n  },\n\n  // Destroy Parsley instance (+ UI)\n  destroy: function () {\n    // Field case: emit destroy event to clean UI and then destroy stored instance\n    this._destroyUI();\n    if ('ParsleyForm' !== this.__class__) {\n      this.$element.removeData('Parsley');\n      this.$element.removeData('ParsleyFieldMultiple');\n      this._trigger('destroy');\n\n      return;\n    }\n\n    // Form case: destroy all its fields and then destroy stored instance\n    for (var i = 0; i < this.fields.length; i++)\n      this.fields[i].destroy();\n\n    this.$element.removeData('Parsley');\n    this._trigger('destroy');\n  },\n\n  asyncIsValid: function (group, force) {\n    ParsleyUtils.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\n    return this.whenValid({group, force});\n  },\n\n  _findRelated: function () {\n    return this.options.multiple ?\n      this.parent.$element.find(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`)\n    : this.$element;\n  }\n};\n\nexport default ParsleyAbstract;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\n\nvar requirementConverters = {\n  string: function(string) {\n    return string;\n  },\n  integer: function(string) {\n    if (isNaN(string))\n      throw 'Requirement is not an integer: \"' + string + '\"';\n    return parseInt(string, 10);\n  },\n  number: function(string) {\n    if (isNaN(string))\n      throw 'Requirement is not a number: \"' + string + '\"';\n    return parseFloat(string);\n  },\n  reference: function(string) { // Unused for now\n    var result = $(string);\n    if (result.length === 0)\n      throw 'No such reference: \"' + string + '\"';\n    return result;\n  },\n  boolean: function(string) {\n    return string !== 'false';\n  },\n  object: function(string) {\n    return ParsleyUtils.deserializeValue(string);\n  },\n  regexp: function(regexp) {\n    var flags = '';\n\n    // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n    if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\n      // Replace the regexp literal string with the first match group: ([gimy]*)\n      // If no flag is present, this will be a blank string\n      flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\n      // Again, replace the regexp literal string with the first match group:\n      // everything excluding the opening and closing slashes and the flags\n      regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n    } else {\n      // Anchor regexp:\n      regexp = '^' + regexp + '$';\n    }\n    return new RegExp(regexp, flags);\n  }\n};\n\nvar convertArrayRequirement = function(string, length) {\n  var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n  if (!m)\n    throw 'Requirement is not an array: \"' + string + '\"';\n  var values = m[1].split(',').map(ParsleyUtils.trimString);\n  if (values.length !== length)\n    throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n  return values;\n};\n\nvar convertRequirement = function(requirementType, string) {\n  var converter = requirementConverters[requirementType || 'string'];\n  if (!converter)\n    throw 'Unknown requirement specification: \"' + requirementType + '\"';\n  return converter(string);\n};\n\nvar convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\n  var main = null;\n  var extra = {};\n  for (var key in requirementSpec) {\n    if (key) {\n      var value = extraOptionReader(key);\n      if ('string' === typeof value)\n        value = convertRequirement(requirementSpec[key], value);\n      extra[key] = value;\n    } else {\n      main = convertRequirement(requirementSpec[key], string);\n    }\n  }\n  return [main, extra];\n};\n\n// A Validator needs to implement the methods `validate` and `parseRequirements`\n\nvar ParsleyValidator = function(spec) {\n  $.extend(true, this, spec);\n};\n\nParsleyValidator.prototype = {\n  // Returns `true` iff the given `value` is valid according the given requirements.\n  validate: function(value, requirementFirstArg) {\n    if (this.fn) { // Legacy style validator\n\n      if (arguments.length > 3)  // If more args then value, requirement, instance...\n        requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\n      return this.fn(value, requirementFirstArg);\n    }\n\n    if ($.isArray(value)) {\n      if (!this.validateMultiple)\n        throw 'Validator `' + this.name + '` does not handle multiple values';\n      return this.validateMultiple(...arguments);\n    } else {\n      if (this.validateNumber) {\n        if (isNaN(value))\n          return false;\n        arguments[0] = parseFloat(arguments[0]);\n        return this.validateNumber(...arguments);\n      }\n      if (this.validateString) {\n        return this.validateString(...arguments);\n      }\n      throw 'Validator `' + this.name + '` only handles multiple values';\n    }\n  },\n\n  // Parses `requirements` into an array of arguments,\n  // according to `this.requirementType`\n  parseRequirements: function(requirements, extraOptionReader) {\n    if ('string' !== typeof requirements) {\n      // Assume requirement already parsed\n      // but make sure we return an array\n      return $.isArray(requirements) ? requirements : [requirements];\n    }\n    var type = this.requirementType;\n    if ($.isArray(type)) {\n      var values = convertArrayRequirement(requirements, type.length);\n      for (var i = 0; i < values.length; i++)\n        values[i] = convertRequirement(type[i], values[i]);\n      return values;\n    } else if ($.isPlainObject(type)) {\n      return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n    } else {\n      return [convertRequirement(type, requirements)];\n    }\n  },\n  // Defaults:\n  requirementType: 'string',\n\n  priority: 2\n\n};\n\nexport default ParsleyValidator;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\nimport ParsleyDefaults from './defaults';\nimport ParsleyValidator from './validator';\n\nvar ParsleyValidatorRegistry = function (validators, catalog) {\n  this.__class__ = 'ParsleyValidatorRegistry';\n\n  // Default Parsley locale is en\n  this.locale = 'en';\n\n  this.init(validators || {}, catalog || {});\n};\n\nvar typeRegexes =  {\n  email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n\n  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n  number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n  integer: /^-?\\d+$/,\n\n  digits: /^\\d+$/,\n\n  alphanum: /^\\w+$/i,\n\n  url: new RegExp(\n      \"^\" +\n        // protocol identifier\n        \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n        // user:pass authentication\n        \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n        \"(?:\" +\n          // IP address exclusion\n          // private & local networks\n          // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n          // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n          // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n          // IP address dotted notation octets\n          // excludes loopback network 0.0.0.0\n          // excludes reserved space >= 224.0.0.0\n          // excludes network & broacast addresses\n          // (first & last IP address of each class)\n          \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n          \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n          \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n        \"|\" +\n          // host name\n          \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n          // domain name\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n          // TLD identifier\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\n        \")\" +\n        // port number\n        \"(?::\\\\d{2,5})?\" +\n        // resource path\n        \"(?:/\\\\S*)?\" +\n      \"$\", 'i'\n    )\n};\ntypeRegexes.range = typeRegexes.number;\n\n// See http://stackoverflow.com/a/10454560/8279\nvar decimalPlaces = num => {\n  var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n  if (!match) { return 0; }\n  return Math.max(\n       0,\n       // Number of digits right of decimal point.\n       (match[1] ? match[1].length : 0) -\n       // Adjust for scientific notation.\n       (match[2] ? +match[2] : 0));\n};\n\nParsleyValidatorRegistry.prototype = {\n  init: function (validators, catalog) {\n    this.catalog = catalog;\n    // Copy prototype's validators:\n    this.validators = $.extend({}, this.validators);\n\n    for (var name in validators)\n      this.addValidator(name, validators[name].fn, validators[name].priority);\n\n    window.Parsley.trigger('parsley:validator:init');\n  },\n\n  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n  setLocale: function (locale) {\n    if ('undefined' === typeof this.catalog[locale])\n      throw new Error(locale + ' is not available in the catalog');\n\n    this.locale = locale;\n\n    return this;\n  },\n\n  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n  addCatalog: function (locale, messages, set) {\n    if ('object' === typeof messages)\n      this.catalog[locale] = messages;\n\n    if (true === set)\n      return this.setLocale(locale);\n\n    return this;\n  },\n\n  // Add a specific message for a given constraint in a given locale\n  addMessage: function (locale, name, message) {\n    if ('undefined' === typeof this.catalog[locale])\n      this.catalog[locale] = {};\n\n    this.catalog[locale][name] = message;\n\n    return this;\n  },\n\n  // Add messages for a given locale\n  addMessages: function (locale, nameMessageObject) {\n    for (var name in nameMessageObject)\n      this.addMessage(locale, name, nameMessageObject[name]);\n\n    return this;\n  },\n\n  // Add a new validator\n  //\n  //    addValidator('custom', {\n  //        requirementType: ['integer', 'integer'],\n  //        validateString: function(value, from, to) {},\n  //        priority: 22,\n  //        messages: {\n  //          en: \"Hey, that's no good\",\n  //          fr: \"Aye aye, pas bon du tout\",\n  //        }\n  //    })\n  //\n  // Old API was addValidator(name, function, priority)\n  //\n  addValidator: function (name, arg1, arg2) {\n    if (this.validators[name])\n      ParsleyUtils.warn('Validator \"' + name + '\" is already defined.');\n    else if (ParsleyDefaults.hasOwnProperty(name)) {\n      ParsleyUtils.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n      return;\n    }\n    return this._setValidator(...arguments);\n  },\n\n  updateValidator: function (name, arg1, arg2) {\n    if (!this.validators[name]) {\n      ParsleyUtils.warn('Validator \"' + name + '\" is not already defined.');\n      return this.addValidator(...arguments);\n    }\n    return this._setValidator(...arguments);\n  },\n\n  removeValidator: function (name) {\n    if (!this.validators[name])\n      ParsleyUtils.warn('Validator \"' + name + '\" is not defined.');\n\n    delete this.validators[name];\n\n    return this;\n  },\n\n  _setValidator: function (name, validator, priority) {\n    if ('object' !== typeof validator) {\n      // Old style validator, with `fn` and `priority`\n      validator = {\n        fn: validator,\n        priority: priority\n      };\n    }\n    if (!validator.validate) {\n      validator = new ParsleyValidator(validator);\n    }\n    this.validators[name] = validator;\n\n    for (var locale in validator.messages || {})\n      this.addMessage(locale, name, validator.messages[locale]);\n\n    return this;\n  },\n\n  getErrorMessage: function (constraint) {\n    var message;\n\n    // Type constraints are a bit different, we have to match their requirements too to find right error message\n    if ('type' === constraint.name) {\n      var typeMessages = this.catalog[this.locale][constraint.name] || {};\n      message = typeMessages[constraint.requirements];\n    } else\n      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n  },\n\n  // Kind of light `sprintf()` implementation\n  formatMessage: function (string, parameters) {\n    if ('object' === typeof parameters) {\n      for (var i in parameters)\n        string = this.formatMessage(string, parameters[i]);\n\n      return string;\n    }\n\n    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n  },\n\n  // Here is the Parsley default validators list.\n  // A validator is an object with the following key values:\n  //  - priority: an integer\n  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n  // Alternatively, a validator can be a function that returns such an object\n  //\n  validators: {\n    notblank: {\n      validateString: function(value) {\n        return /\\S/.test(value);\n      },\n      priority: 2\n    },\n    required: {\n      validateMultiple: function(values) {\n        return values.length > 0;\n      },\n      validateString: function(value) {\n        return /\\S/.test(value);\n      },\n      priority: 512\n    },\n    type: {\n      validateString: function(value, type, {step = 'any', base = 0} = {}) {\n        var regex = typeRegexes[type];\n        if (!regex) {\n          throw new Error('validator type `' + type + '` is not supported');\n        }\n        if (!regex.test(value))\n          return false;\n        if ('number' === type) {\n          if (!/^any$/i.test(step || '')) {\n            var nb = Number(value);\n            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\n            if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\n              return false;\n            // Be careful of rounding errors by using integers.\n            var toInt = f => Math.round(f * Math.pow(10, decimals));\n            if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\n              return false;\n          }\n        }\n        return true;\n      },\n      requirementType: {\n        '': 'string',\n        step: 'string',\n        base: 'number'\n      },\n      priority: 256\n    },\n    pattern: {\n      validateString: function(value, regexp) {\n        return regexp.test(value);\n      },\n      requirementType: 'regexp',\n      priority: 64\n    },\n    minlength: {\n      validateString: function (value, requirement) {\n        return value.length >= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    maxlength: {\n      validateString: function (value, requirement) {\n        return value.length <= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    length: {\n      validateString: function (value, min, max) {\n        return value.length >= min && value.length <= max;\n      },\n      requirementType: ['integer', 'integer'],\n      priority: 30\n    },\n    mincheck: {\n      validateMultiple: function (values, requirement) {\n        return values.length >= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    maxcheck: {\n      validateMultiple: function (values, requirement) {\n        return values.length <= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    check: {\n      validateMultiple: function (values, min, max) {\n        return values.length >= min && values.length <= max;\n      },\n      requirementType: ['integer', 'integer'],\n      priority: 30\n    },\n    min: {\n      validateNumber: function (value, requirement) {\n        return value >= requirement;\n      },\n      requirementType: 'number',\n      priority: 30\n    },\n    max: {\n      validateNumber: function (value, requirement) {\n        return value <= requirement;\n      },\n      requirementType: 'number',\n      priority: 30\n    },\n    range: {\n      validateNumber: function (value, min, max) {\n        return value >= min && value <= max;\n      },\n      requirementType: ['number', 'number'],\n      priority: 30\n    },\n    equalto: {\n      validateString: function (value, refOrValue) {\n        var $reference = $(refOrValue);\n        if ($reference.length)\n          return value === $reference.val();\n        else\n          return value === refOrValue;\n      },\n      priority: 256\n    }\n  }\n};\n\nexport default ParsleyValidatorRegistry;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\n\nvar ParsleyUI = {};\n\nvar diffResults = function (newResult, oldResult, deep) {\n  var added = [];\n  var kept = [];\n\n  for (var i = 0; i < newResult.length; i++) {\n    var found = false;\n\n    for (var j = 0; j < oldResult.length; j++)\n      if (newResult[i].assert.name === oldResult[j].assert.name) {\n        found = true;\n        break;\n      }\n\n    if (found)\n      kept.push(newResult[i]);\n    else\n      added.push(newResult[i]);\n  }\n\n  return {\n    kept: kept,\n    added: added,\n    removed: !deep ? diffResults(oldResult, newResult, true).added : []\n  };\n};\n\nParsleyUI.Form = {\n\n  _actualizeTriggers: function () {\n    this.$element.on('submit.Parsley', evt => { this.onSubmitValidate(evt); });\n    this.$element.on('click.Parsley', ParsleyUtils._SubmitSelector, evt => { this.onSubmitButton(evt); });\n\n    // UI could be disabled\n    if (false === this.options.uiEnabled)\n      return;\n\n    this.$element.attr('novalidate', '');\n  },\n\n  focus: function () {\n    this._focusedField = null;\n\n    if (true === this.validationResult || 'none' === this.options.focus)\n      return null;\n\n    for (var i = 0; i < this.fields.length; i++) {\n      var field = this.fields[i];\n      if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n        this._focusedField = field.$element;\n        if ('first' === this.options.focus)\n          break;\n      }\n    }\n\n    if (null === this._focusedField)\n      return null;\n\n    return this._focusedField.focus();\n  },\n\n  _destroyUI: function () {\n    // Reset all event listeners\n    this.$element.off('.Parsley');\n  }\n\n};\n\nParsleyUI.Field = {\n\n  _reflowUI: function () {\n    this._buildUI();\n\n    // If this field doesn't have an active UI don't bother doing something\n    if (!this._ui)\n      return;\n\n    // Diff between two validation results\n    var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n    // Then store current validation result for next reflow\n    this._ui.lastValidationResult = this.validationResult;\n\n    // Handle valid / invalid / none field class\n    this._manageStatusClass();\n\n    // Add, remove, updated errors messages\n    this._manageErrorsMessages(diff);\n\n    // Triggers impl\n    this._actualizeTriggers();\n\n    // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n    if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\n      this._failedOnce = true;\n      this._actualizeTriggers();\n    }\n  },\n\n  // Returns an array of field's error message(s)\n  getErrorsMessages: function () {\n    // No error message, field is valid\n    if (true === this.validationResult)\n      return [];\n\n    var messages = [];\n\n    for (var i = 0; i < this.validationResult.length; i++)\n      messages.push(this.validationResult[i].errorMessage ||\n       this._getErrorMessage(this.validationResult[i].assert));\n\n    return messages;\n  },\n\n  // It's a goal of Parsley that this method is no longer required [#1073]\n  addError: function (name, {message, assert, updateClass = true} = {}) {\n    this._buildUI();\n    this._addError(name, {message, assert});\n\n    if (updateClass)\n      this._errorClass();\n  },\n\n  // It's a goal of Parsley that this method is no longer required [#1073]\n  updateError: function (name, {message, assert, updateClass = true} = {}) {\n    this._buildUI();\n    this._updateError(name, {message, assert});\n\n    if (updateClass)\n      this._errorClass();\n  },\n\n  // It's a goal of Parsley that this method is no longer required [#1073]\n  removeError: function (name, {updateClass = true} = {}) {\n    this._buildUI();\n    this._removeError(name);\n\n    // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n    // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n    if (updateClass)\n      this._manageStatusClass();\n  },\n\n  _manageStatusClass: function () {\n    if (this.hasConstraints() && this.needsValidation() && true === this.validationResult)\n      this._successClass();\n    else if (this.validationResult.length > 0)\n      this._errorClass();\n    else\n      this._resetClass();\n  },\n\n  _manageErrorsMessages: function (diff) {\n    if ('undefined' !== typeof this.options.errorsMessagesDisabled)\n      return;\n\n    // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n    if ('undefined' !== typeof this.options.errorMessage) {\n      if ((diff.added.length || diff.kept.length)) {\n        this._insertErrorWrapper();\n\n        if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n          this._ui.$errorsWrapper\n            .append(\n              $(this.options.errorTemplate)\n              .addClass('parsley-custom-error-message')\n            );\n\n        return this._ui.$errorsWrapper\n          .addClass('filled')\n          .find('.parsley-custom-error-message')\n          .html(this.options.errorMessage);\n      }\n\n      return this._ui.$errorsWrapper\n        .removeClass('filled')\n        .find('.parsley-custom-error-message')\n        .remove();\n    }\n\n    // Show, hide, update failing constraints messages\n    for (var i = 0; i < diff.removed.length; i++)\n      this._removeError(diff.removed[i].assert.name);\n\n    for (i = 0; i < diff.added.length; i++)\n      this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\n\n    for (i = 0; i < diff.kept.length; i++)\n      this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\n  },\n\n\n  _addError: function (name, {message, assert}) {\n    this._insertErrorWrapper();\n    this._ui.$errorsWrapper\n      .addClass('filled')\n      .append(\n        $(this.options.errorTemplate)\n        .addClass('parsley-' + name)\n        .html(message || this._getErrorMessage(assert))\n      );\n  },\n\n  _updateError: function (name, {message, assert}) {\n    this._ui.$errorsWrapper\n      .addClass('filled')\n      .find('.parsley-' + name)\n      .html(message || this._getErrorMessage(assert));\n  },\n\n  _removeError: function (name) {\n    this._ui.$errorsWrapper\n      .removeClass('filled')\n      .find('.parsley-' + name)\n      .remove();\n  },\n\n  _getErrorMessage: function (constraint) {\n    var customConstraintErrorMessage = constraint.name + 'Message';\n\n    if ('undefined' !== typeof this.options[customConstraintErrorMessage])\n      return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n    return window.Parsley.getErrorMessage(constraint);\n  },\n\n  _buildUI: function () {\n    // UI could be already built or disabled\n    if (this._ui || false === this.options.uiEnabled)\n      return;\n\n    var _ui = {};\n\n    // Give field its Parsley id in DOM\n    this.$element.attr(this.options.namespace + 'id', this.__id__);\n\n    /** Generate important UI elements and store them in this **/\n    // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n    _ui.$errorClassHandler = this._manageClassHandler();\n\n    // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n    _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\n    _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n    // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n    _ui.lastValidationResult = [];\n    _ui.validationInformationVisible = false;\n\n    // Store it in this for later\n    this._ui = _ui;\n  },\n\n  // Determine which element will have `parsley-error` and `parsley-success` classes\n  _manageClassHandler: function () {\n    // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n    if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length)\n      return $(this.options.classHandler);\n\n    // Class handled could also be determined by function given in Parsley options\n    var $handler = this.options.classHandler.call(this, this);\n\n    // If this function returned a valid existing DOM element, go for it\n    if ('undefined' !== typeof $handler && $handler.length)\n      return $handler;\n\n    return this._inputHolder();\n  },\n\n  _inputHolder: function() {\n    // if simple element (input, texatrea, select...) it will perfectly host the classes and precede the error container\n    if (!this.options.multiple || this.$element.is('select'))\n      return this.$element;\n\n    // But if multiple element (radio, checkbox), that would be their parent\n    return this.$element.parent();\n  },\n\n  _insertErrorWrapper: function () {\n    var $errorsContainer;\n\n    // Nothing to do if already inserted\n    if (0 !== this._ui.$errorsWrapper.parent().length)\n      return this._ui.$errorsWrapper.parent();\n\n    if ('string' === typeof this.options.errorsContainer) {\n      if ($(this.options.errorsContainer).length)\n        return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);\n      else\n        ParsleyUtils.warn('The errors container `' + this.options.errorsContainer + '` does not exist in DOM');\n    } else if ('function' === typeof this.options.errorsContainer)\n      $errorsContainer = this.options.errorsContainer.call(this, this);\n\n    if ('undefined' !== typeof $errorsContainer && $errorsContainer.length)\n      return $errorsContainer.append(this._ui.$errorsWrapper);\n\n    return this._inputHolder().after(this._ui.$errorsWrapper);\n  },\n\n  _actualizeTriggers: function () {\n    var $toBind = this._findRelated();\n    var trigger;\n\n    // Remove Parsley events already bound on this field\n    $toBind.off('.Parsley');\n    if (this._failedOnce)\n      $toBind.on(ParsleyUtils.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {\n        this._validateIfNeeded();\n      });\n    else if (trigger = ParsleyUtils.namespaceEvents(this.options.trigger, 'Parsley')) {\n      $toBind.on(trigger, event => {\n        this._validateIfNeeded(event);\n      });\n    }\n  },\n\n  _validateIfNeeded: function (event) {\n    // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n    // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n    // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n    if (event && /key|input/.test(event.type))\n      if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold)\n        return;\n\n    if (this.options.debounce) {\n      window.clearTimeout(this._debounced);\n      this._debounced = window.setTimeout(() => this.validate(), this.options.debounce);\n    } else\n      this.validate();\n  },\n\n  _resetUI: function () {\n    // Reset all event listeners\n    this._failedOnce = false;\n    this._actualizeTriggers();\n\n    // Nothing to do if UI never initialized for this field\n    if ('undefined' === typeof this._ui)\n      return;\n\n    // Reset all errors' li\n    this._ui.$errorsWrapper\n      .removeClass('filled')\n      .children()\n      .remove();\n\n    // Reset validation class\n    this._resetClass();\n\n    // Reset validation flags and last validation result\n    this._ui.lastValidationResult = [];\n    this._ui.validationInformationVisible = false;\n  },\n\n  _destroyUI: function () {\n    this._resetUI();\n\n    if ('undefined' !== typeof this._ui)\n      this._ui.$errorsWrapper.remove();\n\n    delete this._ui;\n  },\n\n  _successClass: function () {\n    this._ui.validationInformationVisible = true;\n    this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n  },\n  _errorClass: function () {\n    this._ui.validationInformationVisible = true;\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n  },\n  _resetClass: function () {\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n  }\n};\n\nexport default ParsleyUI;\n","import $ from 'jquery';\nimport ParsleyAbstract from './abstract';\nimport ParsleyUtils from './utils';\n\nvar ParsleyForm = function (element, domOptions, options) {\n  this.__class__ = 'ParsleyForm';\n\n  this.$element = $(element);\n  this.domOptions = domOptions;\n  this.options = options;\n  this.parent = window.Parsley;\n\n  this.fields = [];\n  this.validationResult = null;\n};\n\nvar statusMapping = {pending: null, resolved: true, rejected: false};\n\nParsleyForm.prototype = {\n  onSubmitValidate: function (event) {\n    // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n    if (true === event.parsley)\n      return;\n\n    // If we didn't come here through a submit button, use the first one in the form\n    var $submitSource = this._$submitSource || this.$element.find(ParsleyUtils._SubmitSelector).first();\n    this._$submitSource = null;\n    this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\n    if ($submitSource.is('[formnovalidate]'))\n      return;\n\n    var promise = this.whenValidate({event});\n\n    if ('resolved' === promise.state() && false !== this._trigger('submit')) {\n      // All good, let event go through. We make this distinction because browsers\n      // differ in their handling of `submit` being called from inside a submit event [#1047]\n    } else {\n      // Rejected or pending: cancel this submit\n      event.stopImmediatePropagation();\n      event.preventDefault();\n      if ('pending' === promise.state())\n        promise.done(() => { this._submit($submitSource); });\n    }\n  },\n\n  onSubmitButton: function(event) {\n    this._$submitSource = $(event.currentTarget);\n  },\n  // internal\n  // _submit submits the form, this time without going through the validations.\n  // Care must be taken to \"fake\" the actual submit button being clicked.\n  _submit: function ($submitSource) {\n    if (false === this._trigger('submit'))\n      return;\n    // Add submit button's data\n    if ($submitSource) {\n      var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\n      if (0 === $synthetic.length)\n        $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\n      $synthetic.attr({\n        name: $submitSource.attr('name'),\n        value: $submitSource.attr('value')\n      });\n    }\n\n    this.$element.trigger($.extend($.Event('submit'), {parsley: true}));\n  },\n\n  // Performs validation on fields while triggering events.\n  // @returns `true` if all validations succeeds, `false`\n  // if a failure is immediately detected, or `null`\n  // if dependant on a promise.\n  // Consider using `whenValidate` instead.\n  validate: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      ParsleyUtils.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\n      var [group, force, event] = arguments;\n      options = {group, force, event};\n    }\n    return statusMapping[ this.whenValidate(options).state() ];\n  },\n\n  whenValidate: function ({group, force, event} = {}) {\n    this.submitEvent = event;\n    if (event) {\n      this.submitEvent = $.extend({}, event, {preventDefault: () => {\n        ParsleyUtils.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n        this.validationResult = false;\n      }});\n    }\n    this.validationResult = true;\n\n    // fire validate event to eventually modify things before every validation\n    this._trigger('validate');\n\n    // Refresh form DOM options and form's fields that could have changed\n    this._refreshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() => {\n      return $.map(this.fields, field => field.whenValidate({force, group}));\n    });\n\n    return ParsleyUtils.all(promises)\n      .done(  () => { this._trigger('success'); })\n      .fail(  () => {\n        this.validationResult = false;\n        this.focus();\n        this._trigger('error');\n      })\n      .always(() => { this._trigger('validated'); })\n      .pipe(...this._pipeAccordingToValidationResult());\n  },\n\n  // Iterate over refreshed fields, and stop on first failure.\n  // Returns `true` if all fields are valid, `false` if a failure is detected\n  // or `null` if the result depends on an unresolved promise.\n  // Prefer using `whenValid` instead.\n  isValid: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      ParsleyUtils.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\n      var [group, force] = arguments;\n      options = {group, force};\n    }\n    return statusMapping[ this.whenValid(options).state() ];\n  },\n\n  // Iterate over refreshed fields and validate them.\n  // Returns a promise.\n  // A validation that immediately fails will interrupt the validations.\n  whenValid: function ({group, force} = {}) {\n    this._refreshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() => {\n      return $.map(this.fields, field => field.whenValid({group, force}));\n    });\n    return ParsleyUtils.all(promises);\n  },\n\n  _refreshFields: function () {\n    return this.actualizeOptions()._bindFields();\n  },\n\n  _bindFields: function () {\n    var oldFields = this.fields;\n\n    this.fields = [];\n    this.fieldsMappedById = {};\n\n    this._withoutReactualizingFormOptions(() => {\n      this.$element\n      .find(this.options.inputs)\n      .not(this.options.excluded)\n      .each((_, element) => {\n        var fieldInstance = new window.Parsley.Factory(element, {}, this);\n\n        // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\n        if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded))\n          if ('undefined' === typeof this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\n            this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\n            this.fields.push(fieldInstance);\n          }\n      });\n\n      $.each(ParsleyUtils.difference(oldFields, this.fields), (_, field) => {\n        field.reset();\n      });\n    });\n    return this;\n  },\n\n  // Internal only.\n  // Looping on a form's fields to do validation or similar\n  // will trigger reactualizing options on all of them, which\n  // in turn will reactualize the form's options.\n  // To avoid calling actualizeOptions so many times on the form\n  // for nothing, _withoutReactualizingFormOptions temporarily disables\n  // the method actualizeOptions on this form while `fn` is called.\n  _withoutReactualizingFormOptions: function (fn) {\n    var oldActualizeOptions = this.actualizeOptions;\n    this.actualizeOptions = function () { return this; };\n    var result = fn();\n    this.actualizeOptions = oldActualizeOptions;\n    return result;\n  },\n\n  // Internal only.\n  // Shortcut to trigger an event\n  // Returns true iff event is not interrupted and default not prevented.\n  _trigger: function (eventName) {\n    return this.trigger('form:' + eventName);\n  }\n\n};\n\nexport default ParsleyForm;\n","import $ from 'jquery';\nimport ParsleyUtils from '../utils';\nimport ParsleyValidator from '../validator';\n\n\nvar ConstraintFactory = function (parsleyField, name, requirements, priority, isDomConstraint) {\n  if (!/ParsleyField/.test(parsleyField.__class__))\n    throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\n\n  var validatorSpec = window.Parsley._validatorRegistry.validators[name];\n  var validator = new ParsleyValidator(validatorSpec);\n\n  $.extend(this, {\n    validator: validator,\n    name: name,\n    requirements: requirements,\n    priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\n    isDomConstraint: true === isDomConstraint\n  });\n  this._parseRequirements(parsleyField.options);\n};\n\nvar capitalize = function(str) {\n  var cap = str[0].toUpperCase();\n  return cap + str.slice(1);\n};\n\nConstraintFactory.prototype = {\n  validate: function(value, instance) {\n    return this.validator.validate(value, ...this.requirementList, instance);\n  },\n\n  _parseRequirements: function(options) {\n    this.requirementList = this.validator.parseRequirements(this.requirements,\n      key => options[this.name + capitalize(key)]\n    );\n  }\n};\n\nexport default ConstraintFactory;\n\n","import $ from 'jquery';\nimport ConstraintFactory from './factory/constraint';\nimport ParsleyUI from './ui';\nimport ParsleyUtils from './utils';\n\nvar ParsleyField = function (field, domOptions, options, parsleyFormInstance) {\n  this.__class__ = 'ParsleyField';\n\n  this.$element = $(field);\n\n  // Set parent if we have one\n  if ('undefined' !== typeof parsleyFormInstance) {\n    this.parent = parsleyFormInstance;\n  }\n\n  this.options = options;\n  this.domOptions = domOptions;\n\n  // Initialize some properties\n  this.constraints = [];\n  this.constraintsByName = {};\n  this.validationResult = true;\n\n  // Bind constraints\n  this._bindConstraints();\n};\n\nvar statusMapping = {pending: null, resolved: true, rejected: false};\n\nParsleyField.prototype = {\n  // # Public API\n  // Validate field and trigger some events for mainly `ParsleyUI`\n  // @returns `true`, an array of the validators that failed, or\n  // `null` if validation is not finished. Prefer using whenValidate\n  validate: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      ParsleyUtils.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\n      options = {options};\n    }\n    var promise = this.whenValidate(options);\n    if (!promise)  // If excluded with `group` option\n      return true;\n    switch (promise.state()) {\n      case 'pending': return null;\n      case 'resolved': return true;\n      case 'rejected': return this.validationResult;\n    }\n  },\n\n  // Validate field and trigger some events for mainly `ParsleyUI`\n  // @returns a promise that succeeds only when all validations do\n  // or `undefined` if field is not in the given `group`.\n  whenValidate: function ({force, group} =  {}) {\n    // do not validate a field if not the same as given validation group\n    this.refreshConstraints();\n    if (group && !this._isInGroup(group))\n      return;\n\n    this.value = this.getValue();\n\n    // Field Validate event. `this.value` could be altered for custom needs\n    this._trigger('validate');\n\n    return this.whenValid({force, value: this.value, _refreshed: true})\n      .always(() => { this._reflowUI(); })\n      .done(() =>   { this._trigger('success'); })\n      .fail(() =>   { this._trigger('error'); })\n      .always(() => { this._trigger('validated'); })\n      .pipe(...this._pipeAccordingToValidationResult());\n  },\n\n  hasConstraints: function () {\n    return 0 !== this.constraints.length;\n  },\n\n  // An empty optional field does not need validation\n  needsValidation: function (value) {\n    if ('undefined' === typeof value)\n      value = this.getValue();\n\n    // If a field is empty and not required, it is valid\n    // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n    if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\n      return false;\n\n    return true;\n  },\n\n  _isInGroup: function (group) {\n    if ($.isArray(this.options.group))\n      return -1 !== $.inArray(group, this.options.group);\n    return this.options.group === group;\n  },\n\n  // Just validate field. Do not trigger any event.\n  // Returns `true` iff all constraints pass, `false` if there are failures,\n  // or `null` if the result can not be determined yet (depends on a promise)\n  // See also `whenValid`.\n  isValid: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      ParsleyUtils.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\n      var [force, value] = arguments;\n      options = {force, value};\n    }\n    var promise = this.whenValid(options);\n    if (!promise) // Excluded via `group`\n      return true;\n    return statusMapping[promise.state()];\n  },\n\n  // Just validate field. Do not trigger any event.\n  // @returns a promise that succeeds only when all validations do\n  // or `undefined` if the field is not in the given `group`.\n  // The argument `force` will force validation of empty fields.\n  // If a `value` is given, it will be validated instead of the value of the input.\n  whenValid: function ({force = false, value, group, _refreshed} = {}) {\n    // Recompute options and rebind constraints to have latest changes\n    if (!_refreshed)\n      this.refreshConstraints();\n    // do not validate a field if not the same as given validation group\n    if (group && !this._isInGroup(group))\n      return;\n\n    this.validationResult = true;\n\n    // A field without constraint is valid\n    if (!this.hasConstraints())\n      return $.when();\n\n    // Value could be passed as argument, needed to add more power to 'field:validate'\n    if ('undefined' === typeof value || null === value)\n      value = this.getValue();\n\n    if (!this.needsValidation(value) && true !== force)\n      return $.when();\n\n    var groupedConstraints = this._getGroupedConstraints();\n    var promises = [];\n    $.each(groupedConstraints, (_, constraints) => {\n      // Process one group of constraints at a time, we validate the constraints\n      // and combine the promises together.\n      var promise = ParsleyUtils.all(\n        $.map(constraints, constraint => this._validateConstraint(value, constraint))\n      );\n      promises.push(promise);\n      if (promise.state() === 'rejected')\n        return false; // Interrupt processing if a group has already failed\n    });\n    return ParsleyUtils.all(promises);\n  },\n\n  // @returns a promise\n  _validateConstraint: function(value, constraint) {\n    var result = constraint.validate(value, this);\n    // Map false to a failed promise\n    if (false === result)\n      result = $.Deferred().reject();\n    // Make sure we return a promise and that we record failures\n    return ParsleyUtils.all([result]).fail(errorMessage => {\n      if (!(this.validationResult instanceof Array))\n        this.validationResult = [];\n      this.validationResult.push({\n        assert: constraint,\n        errorMessage: 'string' === typeof errorMessage && errorMessage\n      });\n    });\n  },\n\n  // @returns Parsley field computed value that could be overrided or configured in DOM\n  getValue: function () {\n    var value;\n\n    // Value could be overriden in DOM or with explicit options\n    if ('function' === typeof this.options.value)\n      value = this.options.value(this);\n    else if ('undefined' !== typeof this.options.value)\n      value = this.options.value;\n    else\n      value = this.$element.val();\n\n    // Handle wrong DOM or configurations\n    if ('undefined' === typeof value || null === value)\n      return '';\n\n    return this._handleWhitespace(value);\n  },\n\n  // Actualize options that could have change since previous validation\n  // Re-bind accordingly constraints (could be some new, removed or updated)\n  refreshConstraints: function () {\n    return this.actualizeOptions()._bindConstraints();\n  },\n\n  /**\n  * Add a new constraint to a field\n  *\n  * @param {String}   name\n  * @param {Mixed}    requirements      optional\n  * @param {Number}   priority          optional\n  * @param {Boolean}  isDomConstraint   optional\n  */\n  addConstraint: function (name, requirements, priority, isDomConstraint) {\n\n    if (window.Parsley._validatorRegistry.validators[name]) {\n      var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\n\n      // if constraint already exist, delete it and push new version\n      if ('undefined' !== this.constraintsByName[constraint.name])\n        this.removeConstraint(constraint.name);\n\n      this.constraints.push(constraint);\n      this.constraintsByName[constraint.name] = constraint;\n    }\n\n    return this;\n  },\n\n  // Remove a constraint\n  removeConstraint: function (name) {\n    for (var i = 0; i < this.constraints.length; i++)\n      if (name === this.constraints[i].name) {\n        this.constraints.splice(i, 1);\n        break;\n      }\n    delete this.constraintsByName[name];\n    return this;\n  },\n\n  // Update a constraint (Remove + re-add)\n  updateConstraint: function (name, parameters, priority) {\n    return this.removeConstraint(name)\n      .addConstraint(name, parameters, priority);\n  },\n\n  // # Internals\n\n  // Internal only.\n  // Bind constraints from config + options + DOM\n  _bindConstraints: function () {\n    var constraints = [];\n    var constraintsByName = {};\n\n    // clean all existing DOM constraints to only keep javascript user constraints\n    for (var i = 0; i < this.constraints.length; i++)\n      if (false === this.constraints[i].isDomConstraint) {\n        constraints.push(this.constraints[i]);\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\n      }\n\n    this.constraints = constraints;\n    this.constraintsByName = constraintsByName;\n\n    // then re-add Parsley DOM-API constraints\n    for (var name in this.options)\n      this.addConstraint(name, this.options[name], undefined, true);\n\n    // finally, bind special HTML5 constraints\n    return this._bindHtml5Constraints();\n  },\n\n  // Internal only.\n  // Bind specific HTML5 constraints to be HTML5 compliant\n  _bindHtml5Constraints: function () {\n    // html5 required\n    if (this.$element.attr('required'))\n      this.addConstraint('required', true, undefined, true);\n\n    // html5 pattern\n    if ('string' === typeof this.$element.attr('pattern'))\n      this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\n\n    // range\n    if (this.$element.attr('type') !== 'date' && 'undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max'))\n      this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\n\n    // HTML5 min\n    else if (this.$element.attr('type') !== 'date' && 'undefined' !== typeof this.$element.attr('min'))\n      this.addConstraint('min', this.$element.attr('min'), undefined, true);\n\n    // HTML5 max\n    else if (this.$element.attr('type') !== 'date' && 'undefined' !== typeof this.$element.attr('max'))\n      this.addConstraint('max', this.$element.attr('max'), undefined, true);\n\n\n    // length\n    if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength'))\n      this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\n\n    // HTML5 minlength\n    else if ('undefined' !== typeof this.$element.attr('minlength'))\n      this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\n\n    // HTML5 maxlength\n    else if ('undefined' !== typeof this.$element.attr('maxlength'))\n      this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\n\n\n    // html5 types\n    var type = this.$element.attr('type');\n\n    if ('undefined' === typeof type)\n      return this;\n\n    // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n    if ('number' === type) {\n      return this.addConstraint('type', ['number', {\n        step: this.$element.attr('step') || '1',\n        base: this.$element.attr('min') || this.$element.attr('value')\n      }], undefined, true);\n    // Regular other HTML5 supported types\n    } else if (/^(email|url|range)$/i.test(type)) {\n      return this.addConstraint('type', type, undefined, true);\n    }\n    return this;\n  },\n\n  // Internal only.\n  // Field is required if have required constraint without `false` value\n  _isRequired: function () {\n    if ('undefined' === typeof this.constraintsByName.required)\n      return false;\n\n    return false !== this.constraintsByName.required.requirements;\n  },\n\n  // Internal only.\n  // Shortcut to trigger an event\n  _trigger: function (eventName) {\n    return this.trigger('field:' + eventName);\n  },\n\n  // Internal only\n  // Handles whitespace in a value\n  // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n  // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n  _handleWhitespace: function (value) {\n    if (true === this.options.trimValue)\n      ParsleyUtils.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n    if ('squish' === this.options.whitespace)\n      value = value.replace(/\\s{2,}/g, ' ');\n\n    if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\n      value = ParsleyUtils.trimString(value);\n\n    return value;\n  },\n\n  // Internal only.\n  // Returns the constraints, grouped by descending priority.\n  // The result is thus an array of arrays of constraints.\n  _getGroupedConstraints: function () {\n    if (false === this.options.priorityEnabled)\n      return [this.constraints];\n\n    var groupedConstraints = [];\n    var index = {};\n\n    // Create array unique of priorities\n    for (var i = 0; i < this.constraints.length; i++) {\n      var p = this.constraints[i].priority;\n      if (!index[p])\n        groupedConstraints.push(index[p] = []);\n      index[p].push(this.constraints[i]);\n    }\n    // Sort them by priority DESC\n    groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\n\n    return groupedConstraints;\n  }\n\n};\n\nexport default ParsleyField;\n","import $ from 'jquery';\n\nvar ParsleyMultiple = function () {\n  this.__class__ = 'ParsleyFieldMultiple';\n};\n\nParsleyMultiple.prototype = {\n  // Add new `$element` sibling for multiple field\n  addElement: function ($element) {\n    this.$elements.push($element);\n\n    return this;\n  },\n\n  // See `ParsleyField.refreshConstraints()`\n  refreshConstraints: function () {\n    var fieldConstraints;\n\n    this.constraints = [];\n\n    // Select multiple special treatment\n    if (this.$element.is('select')) {\n      this.actualizeOptions()._bindConstraints();\n\n      return this;\n    }\n\n    // Gather all constraints for each input in the multiple group\n    for (var i = 0; i < this.$elements.length; i++) {\n\n      // Check if element have not been dynamically removed since last binding\n      if (!$('html').has(this.$elements[i]).length) {\n        this.$elements.splice(i, 1);\n        continue;\n      }\n\n      fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\n\n      for (var j = 0; j < fieldConstraints.length; j++)\n        this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n    }\n\n    return this;\n  },\n\n  // See `ParsleyField.getValue()`\n  getValue: function () {\n    // Value could be overriden in DOM\n    if ('function' === typeof this.options.value)\n      return this.options.value(this);\n    else if ('undefined' !== typeof this.options.value)\n      return this.options.value;\n\n    // Radio input case\n    if (this.$element.is('input[type=radio]'))\n      return this._findRelated().filter(':checked').val() || '';\n\n    // checkbox input case\n    if (this.$element.is('input[type=checkbox]')) {\n      var values = [];\n\n      this._findRelated().filter(':checked').each(function () {\n        values.push($(this).val());\n      });\n\n      return values;\n    }\n\n    // Select multiple case\n    if (this.$element.is('select') && null === this.$element.val())\n      return [];\n\n    // Default case that should never happen\n    return this.$element.val();\n  },\n\n  _init: function () {\n    this.$elements = [this.$element];\n\n    return this;\n  }\n};\n\nexport default ParsleyMultiple;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\nimport ParsleyAbstract from './abstract';\nimport ParsleyForm from './form';\nimport ParsleyField from './field';\nimport ParsleyMultiple from './multiple';\n\nvar ParsleyFactory = function (element, options, parsleyFormInstance) {\n  this.$element = $(element);\n\n  // If the element has already been bound, returns its saved Parsley instance\n  var savedparsleyFormInstance = this.$element.data('Parsley');\n  if (savedparsleyFormInstance) {\n\n    // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\n    if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n      savedparsleyFormInstance.parent = parsleyFormInstance;\n      savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n    }\n\n    if ('object' === typeof options) {\n      $.extend(savedparsleyFormInstance.options, options);\n    }\n\n    return savedparsleyFormInstance;\n  }\n\n  // Parsley must be instantiated with a DOM element or jQuery $element\n  if (!this.$element.length)\n    throw new Error('You must bind Parsley on an existing element.');\n\n  if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__)\n    throw new Error('Parent instance must be a ParsleyForm instance');\n\n  this.parent = parsleyFormInstance || window.Parsley;\n  return this.init(options);\n};\n\nParsleyFactory.prototype = {\n  init: function (options) {\n    this.__class__ = 'Parsley';\n    this.__version__ = '@@version';\n    this.__id__ = ParsleyUtils.generateID();\n\n    // Pre-compute options\n    this._resetOptions(options);\n\n    // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n    if (this.$element.is('form') || (ParsleyUtils.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\n      return this.bind('parsleyForm');\n\n    // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\n    return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n  },\n\n  isMultiple: function () {\n    return (this.$element.is('input[type=radio], input[type=checkbox]')) || (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple'));\n  },\n\n  // Multiples fields are a real nightmare :(\n  // Maybe some refactoring would be appreciated here...\n  handleMultiple: function () {\n    var name;\n    var multiple;\n    var parsleyMultipleInstance;\n\n    // Handle multiple name\n    if (this.options.multiple)\n      ; // We already have our 'multiple' identifier\n    else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length)\n      this.options.multiple = name = this.$element.attr('name');\n    else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length)\n      this.options.multiple = this.$element.attr('id');\n\n    // Special select multiple input\n    if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\n      this.options.multiple = this.options.multiple || this.__id__;\n      return this.bind('parsleyFieldMultiple');\n\n    // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n    } else if (!this.options.multiple) {\n      ParsleyUtils.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n      return this;\n    }\n\n    // Remove special chars\n    this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n    // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n    if ('undefined' !== typeof name) {\n      $('input[name=\"' + name + '\"]').each((i, input) => {\n        if ($(input).is('input[type=radio], input[type=checkbox]'))\n          $(input).attr(this.options.namespace + 'multiple', this.options.multiple);\n      });\n    }\n\n    // Check here if we don't already have a related multiple instance saved\n    var $previouslyRelated = this._findRelated();\n    for (var i = 0; i < $previouslyRelated.length; i++) {\n      parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n      if ('undefined' !== typeof parsleyMultipleInstance) {\n\n        if (!this.$element.data('ParsleyFieldMultiple')) {\n          parsleyMultipleInstance.addElement(this.$element);\n        }\n\n        break;\n      }\n    }\n\n    // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\n    // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\n    this.bind('parsleyField', true);\n\n    return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n  },\n\n  // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\n  bind: function (type, doNotStore) {\n    var parsleyInstance;\n\n    switch (type) {\n      case 'parsleyForm':\n        parsleyInstance = $.extend(\n          new ParsleyForm(this.$element, this.domOptions, this.options),\n          new ParsleyAbstract(),\n          window.ParsleyExtend\n        )._bindFields();\n        break;\n      case 'parsleyField':\n        parsleyInstance = $.extend(\n          new ParsleyField(this.$element, this.domOptions, this.options, this.parent),\n          new ParsleyAbstract(),\n          window.ParsleyExtend\n        );\n        break;\n      case 'parsleyFieldMultiple':\n        parsleyInstance = $.extend(\n          new ParsleyField(this.$element, this.domOptions, this.options, this.parent),\n          new ParsleyMultiple(),\n          new ParsleyAbstract(),\n          window.ParsleyExtend\n        )._init();\n        break;\n      default:\n        throw new Error(type + 'is not a supported Parsley type');\n    }\n\n    if (this.options.multiple)\n      ParsleyUtils.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\n\n    if ('undefined' !== typeof doNotStore) {\n      this.$element.data('ParsleyFieldMultiple', parsleyInstance);\n\n      return parsleyInstance;\n    }\n\n    // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n    this.$element.data('Parsley', parsleyInstance);\n\n    // Tell the world we have a new ParsleyForm or ParsleyField instance!\n    parsleyInstance._actualizeTriggers();\n    parsleyInstance._trigger('init');\n\n    return parsleyInstance;\n  }\n};\n\nexport default ParsleyFactory;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\nimport ParsleyDefaults from './defaults';\nimport ParsleyAbstract from './abstract';\nimport ParsleyValidatorRegistry from './validator_registry';\nimport ParsleyUI from './ui';\nimport ParsleyForm from './form';\nimport ParsleyField from './field';\nimport ParsleyMultiple from './multiple';\nimport ParsleyFactory from './factory';\n\nvar vernums = $.fn.jquery.split('.');\nif (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n  throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n}\nif (!vernums.forEach) {\n  ParsleyUtils.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n}\n// Inherit `on`, `off` & `trigger` to Parsley:\nvar Parsley = $.extend(new ParsleyAbstract(), {\n    $element: $(document),\n    actualizeOptions: null,\n    _resetOptions: null,\n    Factory: ParsleyFactory,\n    version: '@@version'\n  });\n\n// Supplement ParsleyField and Form with ParsleyAbstract\n// This way, the constructors will have access to those methods\n$.extend(ParsleyField.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);\n$.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);\n// Inherit actualizeOptions and _resetOptions:\n$.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\n\n// ### jQuery API\n// `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n$.fn.parsley = $.fn.psly = function (options) {\n  if (this.length > 1) {\n    var instances = [];\n\n    this.each(function () {\n      instances.push($(this).parsley(options));\n    });\n\n    return instances;\n  }\n\n  // Return undefined if applied to non existing DOM element\n  if (!$(this).length) {\n    ParsleyUtils.warn('You must bind Parsley on an existing element.');\n\n    return;\n  }\n\n  return new ParsleyFactory(this, options);\n};\n\n// ### ParsleyField and ParsleyForm extension\n// Ensure the extension is now defined if it wasn't previously\nif ('undefined' === typeof window.ParsleyExtend)\n  window.ParsleyExtend = {};\n\n// ### Parsley config\n// Inherit from ParsleyDefault, and copy over any existing values\nParsley.options = $.extend(ParsleyUtils.objectCreate(ParsleyDefaults), window.ParsleyConfig);\nwindow.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n// ### Globals\nwindow.Parsley = window.psly = Parsley;\nwindow.ParsleyUtils = ParsleyUtils;\n\n// ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\nvar registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\nwindow.ParsleyValidator = {};\n$.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\n  window.Parsley[method] = $.proxy(registry, method);\n  window.ParsleyValidator[method] = function () {\n    ParsleyUtils.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\n    return window.Parsley[method](...arguments);\n  };\n});\n\n// ### ParsleyUI\n// Deprecated global object\nwindow.Parsley.UI = ParsleyUI;\nwindow.ParsleyUI = {\n  removeError: function (instance, name, doNotUpdateClass) {\n    var updateClass = true !== doNotUpdateClass;\n    ParsleyUtils.warnOnce(`Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n    return instance.removeError(name, {updateClass});\n  },\n  getErrorsMessages: function (instance) {\n    ParsleyUtils.warnOnce(`Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly.`);\n    return instance.getErrorsMessages();\n  }\n};\n$.each('addError updateError'.split(' '), function (i, method) {\n  window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\n    var updateClass = true !== doNotUpdateClass;\n    ParsleyUtils.warnOnce(`Accessing ParsleyUI is deprecated. Call '${method}' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n    return instance[method](name, {message, assert, updateClass});\n  };\n});\n\n// ### PARSLEY auto-binding\n// Prevent it by setting `ParsleyConfig.autoBind` to `false`\nif (false !== window.ParsleyConfig.autoBind) {\n  $(function () {\n    // Works only on `data-parsley-validate`.\n    if ($('[data-parsley-validate]').length)\n      $('[data-parsley-validate]').parsley();\n  });\n}\n\nexport default Parsley;\n","import $ from 'jquery';\nimport ParsleyField from './field';\nimport ParsleyForm from './form';\nimport ParsleyUtils from './utils';\n\nvar o = $({});\nvar deprecated = function () {\n  ParsleyUtils.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n};\n\n// Returns an event handler that calls `fn` with the arguments it expects\nfunction adapt(fn, context) {\n  // Store to allow unbinding\n  if (!fn.parsleyAdaptedCallback) {\n    fn.parsleyAdaptedCallback = function () {\n      var args = Array.prototype.slice.call(arguments, 0);\n      args.unshift(this);\n      fn.apply(context || o, args);\n    };\n  }\n  return fn.parsleyAdaptedCallback;\n}\n\nvar eventPrefix = 'parsley:';\n// Converts 'parsley:form:validate' into 'form:validate'\nfunction eventName(name) {\n  if (name.lastIndexOf(eventPrefix, 0) === 0)\n    return name.substr(eventPrefix.length);\n  return name;\n}\n\n// $.listen is deprecated. Use Parsley.on instead.\n$.listen = function (name, callback) {\n  var context;\n  deprecated();\n  if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n    context = arguments[1];\n    callback = arguments[2];\n  }\n\n  if ('function' !== typeof callback)\n    throw new Error('Wrong parameters');\n\n  window.Parsley.on(eventName(name), adapt(callback, context));\n};\n\n$.listenTo = function (instance, name, fn) {\n  deprecated();\n  if (!(instance instanceof ParsleyField) && !(instance instanceof ParsleyForm))\n    throw new Error('Must give Parsley instance');\n\n  if ('string' !== typeof name || 'function' !== typeof fn)\n    throw new Error('Wrong parameters');\n\n  instance.on(eventName(name), adapt(fn));\n};\n\n$.unsubscribe = function (name, fn) {\n  deprecated();\n  if ('string' !== typeof name || 'function' !== typeof fn)\n    throw new Error('Wrong arguments');\n  window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n};\n\n$.unsubscribeTo = function (instance, name) {\n  deprecated();\n  if (!(instance instanceof ParsleyField) && !(instance instanceof ParsleyForm))\n    throw new Error('Must give Parsley instance');\n  instance.off(eventName(name));\n};\n\n$.unsubscribeAll = function (name) {\n  deprecated();\n  window.Parsley.off(eventName(name));\n  $('form,input,textarea,select').each(function () {\n    var instance = $(this).data('Parsley');\n    if (instance) {\n      instance.off(eventName(name));\n    }\n  });\n};\n\n// $.emit is deprecated. Use jQuery events instead.\n$.emit = function (name, instance) {\n  deprecated();\n  var instanceGiven = (instance instanceof ParsleyField) || (instance instanceof ParsleyForm);\n  var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n  args.unshift(eventName(name));\n  if (!instanceGiven) {\n    instance = window.Parsley;\n  }\n  instance.trigger(...args);\n};\n\nexport default {};\n","import $ from 'jquery';\n\nimport Parsley from './main';\n\n$.extend(true, Parsley, {\n  asyncValidators: {\n    'default': {\n      fn: function (xhr) {\n        // By default, only status 2xx are deemed successful.\n        // Note: we use status instead of state() because responses with status 200\n        // but invalid messages (e.g. an empty body for content type set to JSON) will\n        // result in state() === 'rejected'.\n        return xhr.status >= 200 && xhr.status < 300;\n      },\n      url: false\n    },\n    reverse: {\n      fn: function (xhr) {\n        // If reverse option is set, a failing ajax request is considered successful\n        return xhr.status < 200 || xhr.status >= 300;\n      },\n      url: false\n    }\n  },\n\n  addAsyncValidator: function (name, fn, url, options) {\n    Parsley.asyncValidators[name] = {\n      fn: fn,\n      url: url || false,\n      options: options || {}\n    };\n\n    return this;\n  }\n\n});\n\nParsley.addValidator('remote', {\n  requirementType: {\n    '': 'string',\n    'validator': 'string',\n    'reverse': 'boolean',\n    'options': 'object'\n  },\n\n  validateString: function (value, url, options, instance) {\n    var data = {};\n    var ajaxOptions;\n    var csr;\n    var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n    if ('undefined' === typeof Parsley.asyncValidators[validator])\n      throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n    url = Parsley.asyncValidators[validator].url || url;\n\n    // Fill current value\n    if (url.indexOf('{value}') > -1) {\n      url = url.replace('{value}', encodeURIComponent(value));\n    } else {\n      data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\n    }\n\n    // Merge options passed in from the function with the ones in the attribute\n    var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\n\n    // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n    ajaxOptions = $.extend(true, {}, {\n      url: url,\n      data: data,\n      type: 'GET'\n    }, remoteOptions);\n\n    // Generate store key based on ajax options\n    instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n    csr = $.param(ajaxOptions);\n\n    // Initialise querry cache\n    if ('undefined' === typeof Parsley._remoteCache)\n      Parsley._remoteCache = {};\n\n    // Try to retrieve stored xhr\n    var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n    var handleXhr = function () {\n      var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n      if (!result) // Map falsy results to rejected promise\n        result = $.Deferred().reject();\n      return $.when(result);\n    };\n\n    return xhr.then(handleXhr, handleXhr);\n  },\n\n  priority: -1\n});\n\nParsley.on('form:submit', function () {\n  Parsley._remoteCache = {};\n});\n\nwindow.ParsleyExtend.addAsyncValidator = function () {\n  ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n  return Parsley.addAsyncValidator(...arguments);\n};\n","// This is included with the Parsley library itself,\n// thus there is no use in adding it to your project.\nimport Parsley from '../parsley/main';\n\nParsley.addMessages('en', {\n  defaultMessage: \"This value seems to be invalid.\",\n  type: {\n    email:        \"This value should be a valid email.\",\n    url:          \"This value should be a valid url.\",\n    number:       \"This value should be a valid number.\",\n    integer:      \"This value should be a valid integer.\",\n    digits:       \"This value should be digits.\",\n    alphanum:     \"This value should be alphanumeric.\"\n  },\n  notblank:       \"This value should not be blank.\",\n  required:       \"This value is required.\",\n  pattern:        \"This value seems to be invalid.\",\n  min:            \"This value should be greater than or equal to %s.\",\n  max:            \"This value should be lower than or equal to %s.\",\n  range:          \"This value should be between %s and %s.\",\n  minlength:      \"This value is too short. It should have %s characters or more.\",\n  maxlength:      \"This value is too long. It should have %s characters or fewer.\",\n  length:         \"This value length is invalid. It should be between %s and %s characters long.\",\n  mincheck:       \"You must select at least %s choices.\",\n  maxcheck:       \"You must select %s choices or fewer.\",\n  check:          \"You must select between %s and %s choices.\",\n  equalto:        \"This value should be the same.\"\n});\n\nParsley.setLocale('en');\n","/**\n * inputevent - Alleviate browser bugs for input events\n * https://github.com/marcandre/inputevent\n * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)\n * @author Marc-Andre Lafortune <github@marc-andre.ca>\n * @license MIT\n */\n\nimport $ from 'jquery';\n\nfunction InputEvent() {\n  let globals = window || global;\n\n  // Slightly odd way construct our object. This way methods are force bound.\n  // Used to test for duplicate library.\n  $.extend(this, {\n\n    // For browsers that do not support isTrusted, assumes event is native.\n    isNativeEvent: evt => {\n      return evt.originalEvent && evt.originalEvent.isTrusted !== false;\n    },\n\n    fakeInputEvent: evt => {\n      if (this.isNativeEvent(evt)) {\n        $(evt.target).trigger('input');\n      }\n    },\n\n    misbehaves: evt => {\n      if (this.isNativeEvent(evt)) {\n        this.behavesOk(evt);\n        $(document)\n          .on('change.inputevent', evt.data.selector, this.fakeInputEvent);\n        this.fakeInputEvent(evt);\n      }\n    },\n\n    behavesOk: evt => {\n      if (this.isNativeEvent(evt)) {\n        $(document) // Simply unbinds the testing handler\n          .off('input.inputevent', evt.data.selector, this.behavesOk)\n          .off('change.inputevent', evt.data.selector, this.misbehaves);\n      }\n    },\n\n    // Bind the testing handlers\n    install: () => {\n      if (globals.inputEventPatched) {\n        return;\n      }\n      globals.inputEventPatched = '0.0.3';\n      for (let selector of ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]', 'input[type=\"file\"]']) {\n        $(document)\n          .on('input.inputevent', selector, {selector}, this.behavesOk)\n          .on('change.inputevent', selector, {selector}, this.misbehaves);\n      }\n    },\n\n    uninstall: () => {\n      delete globals.inputEventPatched;\n      $(document).off('.inputevent');\n    }\n\n  });\n};\n\nexport default new InputEvent();\n","import $ from 'jquery';\nimport Parsley from './parsley/main';\nimport './parsley/pubsub';\nimport './parsley/remote';\nimport './i18n/en';\nimport inputevent from './vendor/inputevent';\n\ninputevent.install();\n\nexport default Parsley;\n"]}